type Key {
   id: ID! @id
   userTypes: [KeyUserType!]! @relation(onDelete: CASCADE)
   testResultStatus: [KeyTestResultStatus!]! @relation(onDelete: CASCADE)
   stepResultStatus: [KeyStepResultStatus!]! @relation(onDelete: CASCADE)
   languages: [KeyLanguage!]! @relation(onDelete: CASCADE)
}

type KeyUserType {
   id: ID! @id
   key: String! @unique
}

type KeyLanguage {
   id: ID! @id
   key: String! @unique
}

type KeyTestResultStatus {
   id: ID! @id
   key: String! @unique
}

type KeyStepResultStatus {
   id: ID! @id
   key: String! @unique
}

type MultiLanguageContent {
   id: ID! @id
   pt: String!
   en: String
}

type Message {
   id: ID! @id
   title: MultiLanguageContent! @relation(name: "Title", onDelete: CASCADE)
   message: MultiLanguageContent! @relation(name: "Message", onDelete: CASCADE)
}

type Company {
   id: ID! @id

   name: String! @unique
   abbr: String

   welcome: Message! @relation(onDelete: CASCADE)
   tests: [Test!]! @relation(onDelete: CASCADE)
}

type Test {
   id: ID! @id

   publics: [KeyUserType!]!

   languages: [KeyLanguage]!

   instruction: Message! @relation(onDelete: CASCADE)
   company: Company!

   title: MultiLanguageContent! @relation(onDelete: CASCADE)

   steps: [Step!]! @relation(onDelete: CASCADE)
   menus: [Menu!]! @relation(onDelete: CASCADE)

   results: [TestResult!]! @relation(onDelete: CASCADE)

   keys: Key!
}

type Menu {
   id: ID! @id

   order: Int

   root: Boolean! @default(value: false)

   menus: [Menu!]! @relation(name: "SubMenu")

   name: MultiLanguageContent! @relation(onDelete: CASCADE)

   items: [Menu!]! @relation(name: "SubMenu", onDelete: CASCADE)
}

type Path {
   id: ID! @id

   items: [Menu!]!
}

type Step {
   id: ID! @id

   type: [KeyUserType!]!

   question: MultiLanguageContent! @relation(onDelete: CASCADE)

   targets: [Menu!]! @relation(name: "TargetsInTheStep")

   paths: [Path!]! @relation(onDelete: CASCADE)

   results: [StepResult!]! @relation(onDelete: CASCADE)
}

type TestResult {
   id: ID! @id

   parent: Test!

   start: DateTime!
   end: DateTime

   time: Int

   steps: [StepResult!]! @relation(onDelete: CASCADE)

   status: KeyTestResultStatus!
}

type StepResult {
   id: ID! @id

   parent: Step!

   result: TestResult!

   start: DateTime!
   end: DateTime!

   time: Int!

   path: [Menu!]!

   status: KeyStepResultStatus!
}
