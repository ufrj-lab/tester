/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { GraphQLResolveInfo } from 'graphql'
import { core } from 'nexus'
import * as prisma from '../prisma-client'

declare global {
   interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
   objectTypes: {
      fields: {
         Query: QueryObject
         View: ViewObject
         Welcome: WelcomeObject
         Company: CompanyObject
         Menu: MenuObject
         Test: TestObject
         Step: StepObject
         StepResult: StepResultObject
         TestResult: TestResultObject
         TimeResult: TimeResultObject
         ViewConnection: ViewConnectionObject
         PageInfo: PageInfoObject
         ViewEdge: ViewEdgeObject
         AggregateView: AggregateViewObject
         WelcomeConnection: WelcomeConnectionObject
         WelcomeEdge: WelcomeEdgeObject
         AggregateWelcome: AggregateWelcomeObject
         CompanyConnection: CompanyConnectionObject
         CompanyEdge: CompanyEdgeObject
         AggregateCompany: AggregateCompanyObject
         TestConnection: TestConnectionObject
         TestEdge: TestEdgeObject
         AggregateTest: AggregateTestObject
         MenuConnection: MenuConnectionObject
         MenuEdge: MenuEdgeObject
         AggregateMenu: AggregateMenuObject
         StepConnection: StepConnectionObject
         StepEdge: StepEdgeObject
         AggregateStep: AggregateStepObject
         TestResultConnection: TestResultConnectionObject
         TestResultEdge: TestResultEdgeObject
         AggregateTestResult: AggregateTestResultObject
         TimeResultConnection: TimeResultConnectionObject
         TimeResultEdge: TimeResultEdgeObject
         AggregateTimeResult: AggregateTimeResultObject
         StepResultConnection: StepResultConnectionObject
         StepResultEdge: StepResultEdgeObject
         AggregateStepResult: AggregateStepResultObject
         Mutation: MutationObject
         BatchPayload: BatchPayloadObject
         Subscription: SubscriptionObject
         ViewSubscriptionPayload: ViewSubscriptionPayloadObject
         ViewPreviousValues: ViewPreviousValuesObject
         WelcomeSubscriptionPayload: WelcomeSubscriptionPayloadObject
         WelcomePreviousValues: WelcomePreviousValuesObject
         CompanySubscriptionPayload: CompanySubscriptionPayloadObject
         CompanyPreviousValues: CompanyPreviousValuesObject
         TestSubscriptionPayload: TestSubscriptionPayloadObject
         TestPreviousValues: TestPreviousValuesObject
         MenuSubscriptionPayload: MenuSubscriptionPayloadObject
         MenuPreviousValues: MenuPreviousValuesObject
         StepSubscriptionPayload: StepSubscriptionPayloadObject
         StepPreviousValues: StepPreviousValuesObject
         TestResultSubscriptionPayload: TestResultSubscriptionPayloadObject
         TestResultPreviousValues: TestResultPreviousValuesObject
         TimeResultSubscriptionPayload: TimeResultSubscriptionPayloadObject
         TimeResultPreviousValues: TimeResultPreviousValuesObject
         StepResultSubscriptionPayload: StepResultSubscriptionPayloadObject
         StepResultPreviousValues: StepResultPreviousValuesObject
      }
      fieldsDetails: {
         Query: QueryFieldDetails
         View: ViewFieldDetails
         Welcome: WelcomeFieldDetails
         Company: CompanyFieldDetails
         Menu: MenuFieldDetails
         Test: TestFieldDetails
         Step: StepFieldDetails
         StepResult: StepResultFieldDetails
         TestResult: TestResultFieldDetails
         TimeResult: TimeResultFieldDetails
         ViewConnection: ViewConnectionFieldDetails
         PageInfo: PageInfoFieldDetails
         ViewEdge: ViewEdgeFieldDetails
         AggregateView: AggregateViewFieldDetails
         WelcomeConnection: WelcomeConnectionFieldDetails
         WelcomeEdge: WelcomeEdgeFieldDetails
         AggregateWelcome: AggregateWelcomeFieldDetails
         CompanyConnection: CompanyConnectionFieldDetails
         CompanyEdge: CompanyEdgeFieldDetails
         AggregateCompany: AggregateCompanyFieldDetails
         TestConnection: TestConnectionFieldDetails
         TestEdge: TestEdgeFieldDetails
         AggregateTest: AggregateTestFieldDetails
         MenuConnection: MenuConnectionFieldDetails
         MenuEdge: MenuEdgeFieldDetails
         AggregateMenu: AggregateMenuFieldDetails
         StepConnection: StepConnectionFieldDetails
         StepEdge: StepEdgeFieldDetails
         AggregateStep: AggregateStepFieldDetails
         TestResultConnection: TestResultConnectionFieldDetails
         TestResultEdge: TestResultEdgeFieldDetails
         AggregateTestResult: AggregateTestResultFieldDetails
         TimeResultConnection: TimeResultConnectionFieldDetails
         TimeResultEdge: TimeResultEdgeFieldDetails
         AggregateTimeResult: AggregateTimeResultFieldDetails
         StepResultConnection: StepResultConnectionFieldDetails
         StepResultEdge: StepResultEdgeFieldDetails
         AggregateStepResult: AggregateStepResultFieldDetails
         Mutation: MutationFieldDetails
         BatchPayload: BatchPayloadFieldDetails
         Subscription: SubscriptionFieldDetails
         ViewSubscriptionPayload: ViewSubscriptionPayloadFieldDetails
         ViewPreviousValues: ViewPreviousValuesFieldDetails
         WelcomeSubscriptionPayload: WelcomeSubscriptionPayloadFieldDetails
         WelcomePreviousValues: WelcomePreviousValuesFieldDetails
         CompanySubscriptionPayload: CompanySubscriptionPayloadFieldDetails
         CompanyPreviousValues: CompanyPreviousValuesFieldDetails
         TestSubscriptionPayload: TestSubscriptionPayloadFieldDetails
         TestPreviousValues: TestPreviousValuesFieldDetails
         MenuSubscriptionPayload: MenuSubscriptionPayloadFieldDetails
         MenuPreviousValues: MenuPreviousValuesFieldDetails
         StepSubscriptionPayload: StepSubscriptionPayloadFieldDetails
         StepPreviousValues: StepPreviousValuesFieldDetails
         TestResultSubscriptionPayload: TestResultSubscriptionPayloadFieldDetails
         TestResultPreviousValues: TestResultPreviousValuesFieldDetails
         TimeResultSubscriptionPayload: TimeResultSubscriptionPayloadFieldDetails
         TimeResultPreviousValues: TimeResultPreviousValuesFieldDetails
         StepResultSubscriptionPayload: StepResultSubscriptionPayloadFieldDetails
         StepResultPreviousValues: StepResultPreviousValuesFieldDetails
      }
   }
   inputTypes: {
      fields: {
         ViewWhereUniqueInput: ViewWhereUniqueInputInputObject
         MenuWhereInput: MenuWhereInputInputObject
         TestWhereInput: TestWhereInputInputObject
         StepWhereInput: StepWhereInputInputObject
         StepResultWhereInput: StepResultWhereInputInputObject
         TestResultWhereInput: TestResultWhereInputInputObject
         TimeResultWhereInput: TimeResultWhereInputInputObject
         ViewWhereInput: ViewWhereInputInputObject
         WelcomeWhereInput: WelcomeWhereInputInputObject
         CompanyWhereInput: CompanyWhereInputInputObject
         WelcomeWhereUniqueInput: WelcomeWhereUniqueInputInputObject
         CompanyWhereUniqueInput: CompanyWhereUniqueInputInputObject
         TestWhereUniqueInput: TestWhereUniqueInputInputObject
         MenuWhereUniqueInput: MenuWhereUniqueInputInputObject
         StepWhereUniqueInput: StepWhereUniqueInputInputObject
         TestResultWhereUniqueInput: TestResultWhereUniqueInputInputObject
         TimeResultWhereUniqueInput: TimeResultWhereUniqueInputInputObject
         StepResultWhereUniqueInput: StepResultWhereUniqueInputInputObject
         ViewCreateInput: ViewCreateInputInputObject
         WelcomeCreateOneInput: WelcomeCreateOneInputInputObject
         WelcomeCreateInput: WelcomeCreateInputInputObject
         CompanyCreateOneInput: CompanyCreateOneInputInputObject
         CompanyCreateInput: CompanyCreateInputInputObject
         MenuCreateManyInput: MenuCreateManyInputInputObject
         MenuCreateInput: MenuCreateInputInputObject
         MenuCreateOneWithoutItemsInput: MenuCreateOneWithoutItemsInputInputObject
         MenuCreateWithoutItemsInput: MenuCreateWithoutItemsInputInputObject
         MenuCreateManyWithoutMenuInput: MenuCreateManyWithoutMenuInputInputObject
         MenuCreateWithoutMenuInput: MenuCreateWithoutMenuInputInputObject
         TestCreateManyInput: TestCreateManyInputInputObject
         TestCreateInput: TestCreateInputInputObject
         StepCreateManyInput: StepCreateManyInputInputObject
         StepCreateInput: StepCreateInputInputObject
         MenuCreateOneInput: MenuCreateOneInputInputObject
         StepResultCreateManyWithoutParentInput: StepResultCreateManyWithoutParentInputInputObject
         StepResultCreateWithoutParentInput: StepResultCreateWithoutParentInputInputObject
         TestResultCreateOneWithoutStepsInput: TestResultCreateOneWithoutStepsInputInputObject
         TestResultCreateWithoutStepsInput: TestResultCreateWithoutStepsInputInputObject
         TestCreateOneWithoutResultsInput: TestCreateOneWithoutResultsInputInputObject
         TestCreateWithoutResultsInput: TestCreateWithoutResultsInputInputObject
         TimeResultCreateOneInput: TimeResultCreateOneInputInputObject
         TimeResultCreateInput: TimeResultCreateInputInputObject
         TestResultCreateManyWithoutParentInput: TestResultCreateManyWithoutParentInputInputObject
         TestResultCreateWithoutParentInput: TestResultCreateWithoutParentInputInputObject
         StepResultCreateManyWithoutResultParentInput: StepResultCreateManyWithoutResultParentInputInputObject
         StepResultCreateWithoutResultParentInput: StepResultCreateWithoutResultParentInputInputObject
         StepCreateOneWithoutResultsInput: StepCreateOneWithoutResultsInputInputObject
         StepCreateWithoutResultsInput: StepCreateWithoutResultsInputInputObject
         ViewUpdateInput: ViewUpdateInputInputObject
         WelcomeUpdateOneRequiredInput: WelcomeUpdateOneRequiredInputInputObject
         WelcomeUpdateDataInput: WelcomeUpdateDataInputInputObject
         WelcomeUpsertNestedInput: WelcomeUpsertNestedInputInputObject
         CompanyUpdateOneRequiredInput: CompanyUpdateOneRequiredInputInputObject
         CompanyUpdateDataInput: CompanyUpdateDataInputInputObject
         CompanyUpsertNestedInput: CompanyUpsertNestedInputInputObject
         MenuUpdateManyInput: MenuUpdateManyInputInputObject
         MenuUpdateWithWhereUniqueNestedInput: MenuUpdateWithWhereUniqueNestedInputInputObject
         MenuUpdateDataInput: MenuUpdateDataInputInputObject
         MenuUpdateOneWithoutItemsInput: MenuUpdateOneWithoutItemsInputInputObject
         MenuUpdateWithoutItemsDataInput: MenuUpdateWithoutItemsDataInputInputObject
         MenuUpsertWithoutItemsInput: MenuUpsertWithoutItemsInputInputObject
         MenuUpdateManyWithoutMenuInput: MenuUpdateManyWithoutMenuInputInputObject
         MenuUpdateWithWhereUniqueWithoutMenuInput: MenuUpdateWithWhereUniqueWithoutMenuInputInputObject
         MenuUpdateWithoutMenuDataInput: MenuUpdateWithoutMenuDataInputInputObject
         MenuUpsertWithWhereUniqueWithoutMenuInput: MenuUpsertWithWhereUniqueWithoutMenuInputInputObject
         MenuScalarWhereInput: MenuScalarWhereInputInputObject
         MenuUpdateManyWithWhereNestedInput: MenuUpdateManyWithWhereNestedInputInputObject
         MenuUpdateManyDataInput: MenuUpdateManyDataInputInputObject
         MenuUpsertWithWhereUniqueNestedInput: MenuUpsertWithWhereUniqueNestedInputInputObject
         TestUpdateManyInput: TestUpdateManyInputInputObject
         TestUpdateWithWhereUniqueNestedInput: TestUpdateWithWhereUniqueNestedInputInputObject
         TestUpdateDataInput: TestUpdateDataInputInputObject
         StepUpdateManyInput: StepUpdateManyInputInputObject
         StepUpdateWithWhereUniqueNestedInput: StepUpdateWithWhereUniqueNestedInputInputObject
         StepUpdateDataInput: StepUpdateDataInputInputObject
         MenuUpdateOneRequiredInput: MenuUpdateOneRequiredInputInputObject
         MenuUpsertNestedInput: MenuUpsertNestedInputInputObject
         StepResultUpdateManyWithoutParentInput: StepResultUpdateManyWithoutParentInputInputObject
         StepResultUpdateWithWhereUniqueWithoutParentInput: StepResultUpdateWithWhereUniqueWithoutParentInputInputObject
         StepResultUpdateWithoutParentDataInput: StepResultUpdateWithoutParentDataInputInputObject
         TestResultUpdateOneRequiredWithoutStepsInput: TestResultUpdateOneRequiredWithoutStepsInputInputObject
         TestResultUpdateWithoutStepsDataInput: TestResultUpdateWithoutStepsDataInputInputObject
         TestUpdateOneRequiredWithoutResultsInput: TestUpdateOneRequiredWithoutResultsInputInputObject
         TestUpdateWithoutResultsDataInput: TestUpdateWithoutResultsDataInputInputObject
         TestUpsertWithoutResultsInput: TestUpsertWithoutResultsInputInputObject
         TimeResultUpdateOneInput: TimeResultUpdateOneInputInputObject
         TimeResultUpdateDataInput: TimeResultUpdateDataInputInputObject
         TimeResultUpsertNestedInput: TimeResultUpsertNestedInputInputObject
         TestResultUpsertWithoutStepsInput: TestResultUpsertWithoutStepsInputInputObject
         StepResultUpsertWithWhereUniqueWithoutParentInput: StepResultUpsertWithWhereUniqueWithoutParentInputInputObject
         StepResultScalarWhereInput: StepResultScalarWhereInputInputObject
         StepResultUpdateManyWithWhereNestedInput: StepResultUpdateManyWithWhereNestedInputInputObject
         StepResultUpdateManyDataInput: StepResultUpdateManyDataInputInputObject
         StepUpsertWithWhereUniqueNestedInput: StepUpsertWithWhereUniqueNestedInputInputObject
         StepScalarWhereInput: StepScalarWhereInputInputObject
         StepUpdateManyWithWhereNestedInput: StepUpdateManyWithWhereNestedInputInputObject
         StepUpdateManyDataInput: StepUpdateManyDataInputInputObject
         TestResultUpdateManyWithoutParentInput: TestResultUpdateManyWithoutParentInputInputObject
         TestResultUpdateWithWhereUniqueWithoutParentInput: TestResultUpdateWithWhereUniqueWithoutParentInputInputObject
         TestResultUpdateWithoutParentDataInput: TestResultUpdateWithoutParentDataInputInputObject
         StepResultUpdateManyWithoutResultParentInput: StepResultUpdateManyWithoutResultParentInputInputObject
         StepResultUpdateWithWhereUniqueWithoutResultParentInput: StepResultUpdateWithWhereUniqueWithoutResultParentInputInputObject
         StepResultUpdateWithoutResultParentDataInput: StepResultUpdateWithoutResultParentDataInputInputObject
         StepUpdateOneRequiredWithoutResultsInput: StepUpdateOneRequiredWithoutResultsInputInputObject
         StepUpdateWithoutResultsDataInput: StepUpdateWithoutResultsDataInputInputObject
         StepUpsertWithoutResultsInput: StepUpsertWithoutResultsInputInputObject
         StepResultUpsertWithWhereUniqueWithoutResultParentInput: StepResultUpsertWithWhereUniqueWithoutResultParentInputInputObject
         TestResultUpsertWithWhereUniqueWithoutParentInput: TestResultUpsertWithWhereUniqueWithoutParentInputInputObject
         TestResultScalarWhereInput: TestResultScalarWhereInputInputObject
         TestResultUpdateManyWithWhereNestedInput: TestResultUpdateManyWithWhereNestedInputInputObject
         TestResultUpdateManyDataInput: TestResultUpdateManyDataInputInputObject
         TestUpsertWithWhereUniqueNestedInput: TestUpsertWithWhereUniqueNestedInputInputObject
         TestScalarWhereInput: TestScalarWhereInputInputObject
         TestUpdateManyWithWhereNestedInput: TestUpdateManyWithWhereNestedInputInputObject
         TestUpdateManyDataInput: TestUpdateManyDataInputInputObject
         WelcomeUpdateInput: WelcomeUpdateInputInputObject
         WelcomeUpdateManyMutationInput: WelcomeUpdateManyMutationInputInputObject
         CompanyUpdateInput: CompanyUpdateInputInputObject
         CompanyUpdateManyMutationInput: CompanyUpdateManyMutationInputInputObject
         TestUpdateInput: TestUpdateInputInputObject
         TestUpdateManyMutationInput: TestUpdateManyMutationInputInputObject
         MenuUpdateInput: MenuUpdateInputInputObject
         MenuUpdateManyMutationInput: MenuUpdateManyMutationInputInputObject
         StepUpdateInput: StepUpdateInputInputObject
         StepUpdateManyMutationInput: StepUpdateManyMutationInputInputObject
         TestResultCreateInput: TestResultCreateInputInputObject
         TestResultUpdateInput: TestResultUpdateInputInputObject
         TestResultUpdateManyMutationInput: TestResultUpdateManyMutationInputInputObject
         TimeResultUpdateInput: TimeResultUpdateInputInputObject
         TimeResultUpdateManyMutationInput: TimeResultUpdateManyMutationInputInputObject
         StepResultCreateInput: StepResultCreateInputInputObject
         StepResultUpdateInput: StepResultUpdateInputInputObject
         StepResultUpdateManyMutationInput: StepResultUpdateManyMutationInputInputObject
         ViewSubscriptionWhereInput: ViewSubscriptionWhereInputInputObject
         WelcomeSubscriptionWhereInput: WelcomeSubscriptionWhereInputInputObject
         CompanySubscriptionWhereInput: CompanySubscriptionWhereInputInputObject
         TestSubscriptionWhereInput: TestSubscriptionWhereInputInputObject
         MenuSubscriptionWhereInput: MenuSubscriptionWhereInputInputObject
         StepSubscriptionWhereInput: StepSubscriptionWhereInputInputObject
         TestResultSubscriptionWhereInput: TestResultSubscriptionWhereInputInputObject
         TimeResultSubscriptionWhereInput: TimeResultSubscriptionWhereInputInputObject
         StepResultSubscriptionWhereInput: StepResultSubscriptionWhereInputInputObject
      }
   }
   enumTypes: {
      MenuOrderByInput: MenuOrderByInputValues
      ResultStatus: ResultStatusValues
      TestOrderByInput: TestOrderByInputValues
      StepOrderByInput: StepOrderByInputValues
      StepResultOrderByInput: StepResultOrderByInputValues
      TestResultOrderByInput: TestResultOrderByInputValues
      ViewOrderByInput: ViewOrderByInputValues
      WelcomeOrderByInput: WelcomeOrderByInputValues
      CompanyOrderByInput: CompanyOrderByInputValues
      TimeResultOrderByInput: TimeResultOrderByInputValues
      MutationType: MutationTypeValues
   }
}

// Types for Query

type QueryObject =
   | QueryFields
   | { name: 'view'; args?: QueryViewArgs[] | false; alias?: string }
   | { name: 'views'; args?: QueryViewsArgs[] | false; alias?: string }
   | {
        name: 'viewsConnection'
        args?: QueryViewsConnectionArgs[] | false
        alias?: string
     }
   | { name: 'welcome'; args?: QueryWelcomeArgs[] | false; alias?: string }
   | { name: 'welcomes'; args?: QueryWelcomesArgs[] | false; alias?: string }
   | {
        name: 'welcomesConnection'
        args?: QueryWelcomesConnectionArgs[] | false
        alias?: string
     }
   | { name: 'company'; args?: QueryCompanyArgs[] | false; alias?: string }
   | { name: 'companies'; args?: QueryCompaniesArgs[] | false; alias?: string }
   | {
        name: 'companiesConnection'
        args?: QueryCompaniesConnectionArgs[] | false
        alias?: string
     }
   | { name: 'test'; args?: QueryTestArgs[] | false; alias?: string }
   | { name: 'tests'; args?: QueryTestsArgs[] | false; alias?: string }
   | {
        name: 'testsConnection'
        args?: QueryTestsConnectionArgs[] | false
        alias?: string
     }
   | { name: 'menu'; args?: QueryMenuArgs[] | false; alias?: string }
   | { name: 'menus'; args?: QueryMenusArgs[] | false; alias?: string }
   | {
        name: 'menusConnection'
        args?: QueryMenusConnectionArgs[] | false
        alias?: string
     }
   | { name: 'step'; args?: QueryStepArgs[] | false; alias?: string }
   | { name: 'steps'; args?: QueryStepsArgs[] | false; alias?: string }
   | {
        name: 'stepsConnection'
        args?: QueryStepsConnectionArgs[] | false
        alias?: string
     }
   | {
        name: 'testResult'
        args?: QueryTestResultArgs[] | false
        alias?: string
     }
   | {
        name: 'testResults'
        args?: QueryTestResultsArgs[] | false
        alias?: string
     }
   | {
        name: 'testResultsConnection'
        args?: QueryTestResultsConnectionArgs[] | false
        alias?: string
     }
   | {
        name: 'timeResult'
        args?: QueryTimeResultArgs[] | false
        alias?: string
     }
   | {
        name: 'timeResults'
        args?: QueryTimeResultsArgs[] | false
        alias?: string
     }
   | {
        name: 'timeResultsConnection'
        args?: QueryTimeResultsConnectionArgs[] | false
        alias?: string
     }
   | {
        name: 'stepResult'
        args?: QueryStepResultArgs[] | false
        alias?: string
     }
   | {
        name: 'stepResults'
        args?: QueryStepResultsArgs[] | false
        alias?: string
     }
   | {
        name: 'stepResultsConnection'
        args?: QueryStepResultsConnectionArgs[] | false
        alias?: string
     }

type QueryFields =
   | 'view'
   | 'views'
   | 'viewsConnection'
   | 'welcome'
   | 'welcomes'
   | 'welcomesConnection'
   | 'company'
   | 'companies'
   | 'companiesConnection'
   | 'test'
   | 'tests'
   | 'testsConnection'
   | 'menu'
   | 'menus'
   | 'menusConnection'
   | 'step'
   | 'steps'
   | 'stepsConnection'
   | 'testResult'
   | 'testResults'
   | 'testResultsConnection'
   | 'timeResult'
   | 'timeResults'
   | 'timeResultsConnection'
   | 'stepResult'
   | 'stepResults'
   | 'stepResultsConnection'

type QueryViewArgs = 'where'
type QueryViewsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryViewsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryWelcomeArgs = 'where'
type QueryWelcomesArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryWelcomesConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryCompanyArgs = 'where'
type QueryCompaniesArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryCompaniesConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryTestArgs = 'where'
type QueryTestsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryTestsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryMenuArgs = 'where'
type QueryMenusArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryMenusConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryStepArgs = 'where'
type QueryStepsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryStepsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryTestResultArgs = 'where'
type QueryTestResultsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryTestResultsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryTimeResultArgs = 'where'
type QueryTimeResultsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryTimeResultsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryStepResultArgs = 'where'
type QueryStepResultsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type QueryStepResultsConnectionArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface QueryFieldDetails {
   view: {
      type: 'View'
      args: Record<QueryViewArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: ViewWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.View | null> | prisma.View | null
   }
   views: {
      type: 'View'
      args: Record<QueryViewsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: ViewWhereInput | null
            orderBy?: prisma.ViewOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.View[]> | prisma.View[]
   }
   viewsConnection: {
      type: 'ViewConnection'
      args: Record<QueryViewsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: ViewWhereInput | null
            orderBy?: prisma.ViewOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.ViewConnection> | prisma.ViewConnection
   }
   welcome: {
      type: 'Welcome'
      args: Record<QueryWelcomeArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: WelcomeWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome | null> | prisma.Welcome | null
   }
   welcomes: {
      type: 'Welcome'
      args: Record<QueryWelcomesArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: WelcomeWhereInput | null
            orderBy?: prisma.WelcomeOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome[]> | prisma.Welcome[]
   }
   welcomesConnection: {
      type: 'WelcomeConnection'
      args: Record<QueryWelcomesConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: WelcomeWhereInput | null
            orderBy?: prisma.WelcomeOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.WelcomeConnection> | prisma.WelcomeConnection
   }
   company: {
      type: 'Company'
      args: Record<QueryCompanyArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: CompanyWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company | null> | prisma.Company | null
   }
   companies: {
      type: 'Company'
      args: Record<QueryCompaniesArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: CompanyWhereInput | null
            orderBy?: prisma.CompanyOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company[]> | prisma.Company[]
   }
   companiesConnection: {
      type: 'CompanyConnection'
      args: Record<QueryCompaniesConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: CompanyWhereInput | null
            orderBy?: prisma.CompanyOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.CompanyConnection> | prisma.CompanyConnection
   }
   test: {
      type: 'Test'
      args: Record<QueryTestArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: TestWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test | null> | prisma.Test | null
   }
   tests: {
      type: 'Test'
      args: Record<QueryTestsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: TestWhereInput | null
            orderBy?: prisma.TestOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test[]> | prisma.Test[]
   }
   testsConnection: {
      type: 'TestConnection'
      args: Record<QueryTestsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: TestWhereInput | null
            orderBy?: prisma.TestOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestConnection> | prisma.TestConnection
   }
   menu: {
      type: 'Menu'
      args: Record<QueryMenuArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: MenuWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu | null> | prisma.Menu | null
   }
   menus: {
      type: 'Menu'
      args: Record<QueryMenusArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: MenuWhereInput | null
            orderBy?: prisma.MenuOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu[]> | prisma.Menu[]
   }
   menusConnection: {
      type: 'MenuConnection'
      args: Record<QueryMenusConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: MenuWhereInput | null
            orderBy?: prisma.MenuOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MenuConnection> | prisma.MenuConnection
   }
   step: {
      type: 'Step'
      args: Record<QueryStepArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: StepWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step | null> | prisma.Step | null
   }
   steps: {
      type: 'Step'
      args: Record<QueryStepsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: StepWhereInput | null
            orderBy?: prisma.StepOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step[]> | prisma.Step[]
   }
   stepsConnection: {
      type: 'StepConnection'
      args: Record<QueryStepsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: StepWhereInput | null
            orderBy?: prisma.StepOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepConnection> | prisma.StepConnection
   }
   testResult: {
      type: 'TestResult'
      args: Record<QueryTestResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: TestResultWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult | null> | prisma.TestResult | null
   }
   testResults: {
      type: 'TestResult'
      args: Record<QueryTestResultsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: TestResultWhereInput | null
            orderBy?: prisma.TestResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult[]> | prisma.TestResult[]
   }
   testResultsConnection: {
      type: 'TestResultConnection'
      args: Record<QueryTestResultsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: TestResultWhereInput | null
            orderBy?: prisma.TestResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResultConnection> | prisma.TestResultConnection
   }
   timeResult: {
      type: 'TimeResult'
      args: Record<QueryTimeResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: TimeResultWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult | null> | prisma.TimeResult | null
   }
   timeResults: {
      type: 'TimeResult'
      args: Record<QueryTimeResultsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: TimeResultWhereInput | null
            orderBy?: prisma.TimeResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult[]> | prisma.TimeResult[]
   }
   timeResultsConnection: {
      type: 'TimeResultConnection'
      args: Record<QueryTimeResultsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: TimeResultWhereInput | null
            orderBy?: prisma.TimeResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResultConnection> | prisma.TimeResultConnection
   }
   stepResult: {
      type: 'StepResult'
      args: Record<QueryStepResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Query'>,
         args: { where: StepResultWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult | null> | prisma.StepResult | null
   }
   stepResults: {
      type: 'StepResult'
      args: Record<QueryStepResultsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: StepResultWhereInput | null
            orderBy?: prisma.StepResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult[]> | prisma.StepResult[]
   }
   stepResultsConnection: {
      type: 'StepResultConnection'
      args: Record<QueryStepResultsConnectionArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Query'>,
         args: {
            where?: StepResultWhereInput | null
            orderBy?: prisma.StepResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResultConnection> | prisma.StepResultConnection
   }
}

// Types for View

type ViewObject =
   | ViewFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'welcome'; args?: [] | false; alias?: string }
   | { name: 'company'; args?: [] | false; alias?: string }
   | { name: 'menus'; args?: ViewMenusArgs[] | false; alias?: string }
   | { name: 'tests'; args?: ViewTestsArgs[] | false; alias?: string }
   | { name: 'steps'; args?: ViewStepsArgs[] | false; alias?: string }

type ViewFields = 'id' | 'welcome' | 'company' | 'menus' | 'tests' | 'steps'

type ViewMenusArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type ViewTestsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type ViewStepsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface ViewFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   welcome: {
      type: 'Welcome'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'View'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome> | prisma.Welcome
   }
   company: {
      type: 'Company'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'View'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company> | prisma.Company
   }
   menus: {
      type: 'Menu'
      args: Record<ViewMenusArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'View'>,
         args: {
            where?: MenuWhereInput | null
            orderBy?: prisma.MenuOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu[]> | prisma.Menu[]
   }
   tests: {
      type: 'Test'
      args: Record<ViewTestsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'View'>,
         args: {
            where?: TestWhereInput | null
            orderBy?: prisma.TestOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test[]> | prisma.Test[]
   }
   steps: {
      type: 'Step'
      args: Record<ViewStepsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'View'>,
         args: {
            where?: StepWhereInput | null
            orderBy?: prisma.StepOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step[]> | prisma.Step[]
   }
}

// Types for Welcome

type WelcomeObject =
   | WelcomeFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'title'; args?: [] | false; alias?: string }
   | { name: 'message'; args?: [] | false; alias?: string }

type WelcomeFields = 'id' | 'title' | 'message'

export interface WelcomeFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   title: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   message: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for Company

type CompanyObject =
   | CompanyFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'name'; args?: [] | false; alias?: string }
   | { name: 'abbr'; args?: [] | false; alias?: string }
   | { name: 'logo'; args?: [] | false; alias?: string }

type CompanyFields = 'id' | 'name' | 'abbr' | 'logo'

export interface CompanyFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   name: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   abbr: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   logo: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

// Types for Menu

type MenuObject =
   | MenuFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'menu'; args?: [] | false; alias?: string }
   | { name: 'name'; args?: [] | false; alias?: string }
   | { name: 'items'; args?: MenuItemsArgs[] | false; alias?: string }

type MenuFields = 'id' | 'menu' | 'name' | 'items'

type MenuItemsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface MenuFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   menu: {
      type: 'Menu'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Menu'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu | null> | prisma.Menu | null
   }
   name: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   items: {
      type: 'Menu'
      args: Record<MenuItemsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Menu'>,
         args: {
            where?: MenuWhereInput | null
            orderBy?: prisma.MenuOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu[]> | prisma.Menu[]
   }
}

// Types for Test

type TestObject =
   | TestFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'title'; args?: [] | false; alias?: string }
   | { name: 'steps'; args?: TestStepsArgs[] | false; alias?: string }
   | { name: 'menus'; args?: TestMenusArgs[] | false; alias?: string }
   | { name: 'results'; args?: TestResultsArgs[] | false; alias?: string }

type TestFields = 'id' | 'title' | 'steps' | 'menus' | 'results'

type TestStepsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type TestMenusArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type TestResultsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface TestFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   title: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   steps: {
      type: 'Step'
      args: Record<TestStepsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Test'>,
         args: {
            where?: StepWhereInput | null
            orderBy?: prisma.StepOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step[]> | prisma.Step[]
   }
   menus: {
      type: 'Menu'
      args: Record<TestMenusArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Test'>,
         args: {
            where?: MenuWhereInput | null
            orderBy?: prisma.MenuOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu[]> | prisma.Menu[]
   }
   results: {
      type: 'TestResult'
      args: Record<TestResultsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Test'>,
         args: {
            where?: TestResultWhereInput | null
            orderBy?: prisma.TestResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult[]> | prisma.TestResult[]
   }
}

// Types for Step

type StepObject =
   | StepFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'question'; args?: [] | false; alias?: string }
   | { name: 'target'; args?: [] | false; alias?: string }
   | { name: 'path'; args?: StepPathArgs[] | false; alias?: string }
   | { name: 'results'; args?: StepResultsArgs[] | false; alias?: string }

type StepFields = 'id' | 'question' | 'target' | 'path' | 'results'

type StepPathArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'
type StepResultsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface StepFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   question: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   target: {
      type: 'Menu'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Step'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu> | prisma.Menu
   }
   path: {
      type: 'Menu'
      args: Record<StepPathArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Step'>,
         args: {
            where?: MenuWhereInput | null
            orderBy?: prisma.MenuOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu[]> | prisma.Menu[]
   }
   results: {
      type: 'StepResult'
      args: Record<StepResultsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'Step'>,
         args: {
            where?: StepResultWhereInput | null
            orderBy?: prisma.StepResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult[]> | prisma.StepResult[]
   }
}

// Types for StepResult

type StepResultObject =
   | StepResultFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'parent'; args?: [] | false; alias?: string }
   | { name: 'resultParent'; args?: [] | false; alias?: string }
   | { name: 'start'; args?: [] | false; alias?: string }
   | { name: 'end'; args?: [] | false; alias?: string }
   | { name: 'time'; args?: [] | false; alias?: string }
   | { name: 'path'; args?: StepResultPathArgs[] | false; alias?: string }
   | { name: 'status'; args?: [] | false; alias?: string }

type StepResultFields =
   | 'id'
   | 'parent'
   | 'resultParent'
   | 'start'
   | 'end'
   | 'time'
   | 'path'
   | 'status'

type StepResultPathArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface StepResultFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   parent: {
      type: 'Step'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepResult'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step> | prisma.Step
   }
   resultParent: {
      type: 'TestResult'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepResult'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult> | prisma.TestResult
   }
   start: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   end: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   time: {
      type: 'TimeResult'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'StepResult'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult | null> | prisma.TimeResult | null
   }
   path: {
      type: 'Menu'
      args: Record<StepResultPathArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'StepResult'>,
         args: {
            where?: MenuWhereInput | null
            orderBy?: prisma.MenuOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu[]> | prisma.Menu[]
   }
   status: {
      type: 'ResultStatus'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepResult'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.ResultStatus> | prisma.ResultStatus
   }
}

// Types for TestResult

type TestResultObject =
   | TestResultFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'parent'; args?: [] | false; alias?: string }
   | { name: 'start'; args?: [] | false; alias?: string }
   | { name: 'end'; args?: [] | false; alias?: string }
   | { name: 'time'; args?: [] | false; alias?: string }
   | { name: 'steps'; args?: TestResultStepsArgs[] | false; alias?: string }
   | { name: 'status'; args?: [] | false; alias?: string }

type TestResultFields =
   | 'id'
   | 'parent'
   | 'start'
   | 'end'
   | 'time'
   | 'steps'
   | 'status'

type TestResultStepsArgs =
   | 'where'
   | 'orderBy'
   | 'skip'
   | 'after'
   | 'before'
   | 'first'
   | 'last'

export interface TestResultFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   parent: {
      type: 'Test'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestResult'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test> | prisma.Test
   }
   start: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   end: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   time: {
      type: 'TimeResult'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TestResult'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult | null> | prisma.TimeResult | null
   }
   steps: {
      type: 'StepResult'
      args: Record<TestResultStepsArgs, core.NexusArgDef<string>>
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'TestResult'>,
         args: {
            where?: StepResultWhereInput | null
            orderBy?: prisma.StepResultOrderByInput | null
            skip?: number | null
            after?: string | null
            before?: string | null
            first?: number | null
            last?: number | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult[]> | prisma.StepResult[]
   }
   status: {
      type: 'ResultStatus'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestResult'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.ResultStatus> | prisma.ResultStatus
   }
}

// Types for TimeResult

type TimeResultObject =
   | TimeResultFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'int'; args?: [] | false; alias?: string }
   | { name: 'text'; args?: [] | false; alias?: string }

type TimeResultFields = 'id' | 'int' | 'text'

export interface TimeResultFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   int: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   text: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for ViewConnection

type ViewConnectionObject =
   | ViewConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type ViewConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface ViewConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ViewConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'ViewEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'ViewConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.ViewEdge[]> | prisma.ViewEdge[]
   }
   aggregate: {
      type: 'AggregateView'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ViewConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateView> | prisma.AggregateView
   }
}

// Types for PageInfo

type PageInfoObject =
   | PageInfoFields
   | { name: 'hasNextPage'; args?: [] | false; alias?: string }
   | { name: 'hasPreviousPage'; args?: [] | false; alias?: string }
   | { name: 'startCursor'; args?: [] | false; alias?: string }
   | { name: 'endCursor'; args?: [] | false; alias?: string }

type PageInfoFields =
   | 'hasNextPage'
   | 'hasPreviousPage'
   | 'startCursor'
   | 'endCursor'

export interface PageInfoFieldDetails {
   hasNextPage: {
      type: 'Boolean'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   hasPreviousPage: {
      type: 'Boolean'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   startCursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   endCursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

// Types for ViewEdge

type ViewEdgeObject =
   | ViewEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type ViewEdgeFields = 'node' | 'cursor'

export interface ViewEdgeFieldDetails {
   node: {
      type: 'View'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ViewEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.View> | prisma.View
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateView

type AggregateViewObject =
   | AggregateViewFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateViewFields = 'count'

export interface AggregateViewFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for WelcomeConnection

type WelcomeConnectionObject =
   | WelcomeConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type WelcomeConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface WelcomeConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'WelcomeConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'WelcomeEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'WelcomeConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.WelcomeEdge[]> | prisma.WelcomeEdge[]
   }
   aggregate: {
      type: 'AggregateWelcome'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'WelcomeConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateWelcome> | prisma.AggregateWelcome
   }
}

// Types for WelcomeEdge

type WelcomeEdgeObject =
   | WelcomeEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type WelcomeEdgeFields = 'node' | 'cursor'

export interface WelcomeEdgeFieldDetails {
   node: {
      type: 'Welcome'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'WelcomeEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome> | prisma.Welcome
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateWelcome

type AggregateWelcomeObject =
   | AggregateWelcomeFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateWelcomeFields = 'count'

export interface AggregateWelcomeFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for CompanyConnection

type CompanyConnectionObject =
   | CompanyConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type CompanyConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface CompanyConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CompanyConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'CompanyEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'CompanyConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.CompanyEdge[]> | prisma.CompanyEdge[]
   }
   aggregate: {
      type: 'AggregateCompany'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CompanyConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateCompany> | prisma.AggregateCompany
   }
}

// Types for CompanyEdge

type CompanyEdgeObject =
   | CompanyEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type CompanyEdgeFields = 'node' | 'cursor'

export interface CompanyEdgeFieldDetails {
   node: {
      type: 'Company'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CompanyEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company> | prisma.Company
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateCompany

type AggregateCompanyObject =
   | AggregateCompanyFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateCompanyFields = 'count'

export interface AggregateCompanyFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for TestConnection

type TestConnectionObject =
   | TestConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type TestConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface TestConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'TestEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'TestConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestEdge[]> | prisma.TestEdge[]
   }
   aggregate: {
      type: 'AggregateTest'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateTest> | prisma.AggregateTest
   }
}

// Types for TestEdge

type TestEdgeObject =
   | TestEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type TestEdgeFields = 'node' | 'cursor'

export interface TestEdgeFieldDetails {
   node: {
      type: 'Test'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test> | prisma.Test
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateTest

type AggregateTestObject =
   | AggregateTestFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateTestFields = 'count'

export interface AggregateTestFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for MenuConnection

type MenuConnectionObject =
   | MenuConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type MenuConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface MenuConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'MenuConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'MenuEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'MenuConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MenuEdge[]> | prisma.MenuEdge[]
   }
   aggregate: {
      type: 'AggregateMenu'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'MenuConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateMenu> | prisma.AggregateMenu
   }
}

// Types for MenuEdge

type MenuEdgeObject =
   | MenuEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type MenuEdgeFields = 'node' | 'cursor'

export interface MenuEdgeFieldDetails {
   node: {
      type: 'Menu'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'MenuEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu> | prisma.Menu
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateMenu

type AggregateMenuObject =
   | AggregateMenuFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateMenuFields = 'count'

export interface AggregateMenuFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for StepConnection

type StepConnectionObject =
   | StepConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type StepConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface StepConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'StepEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'StepConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepEdge[]> | prisma.StepEdge[]
   }
   aggregate: {
      type: 'AggregateStep'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateStep> | prisma.AggregateStep
   }
}

// Types for StepEdge

type StepEdgeObject =
   | StepEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type StepEdgeFields = 'node' | 'cursor'

export interface StepEdgeFieldDetails {
   node: {
      type: 'Step'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step> | prisma.Step
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateStep

type AggregateStepObject =
   | AggregateStepFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateStepFields = 'count'

export interface AggregateStepFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for TestResultConnection

type TestResultConnectionObject =
   | TestResultConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type TestResultConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface TestResultConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'TestResultEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'TestResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResultEdge[]> | prisma.TestResultEdge[]
   }
   aggregate: {
      type: 'AggregateTestResult'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateTestResult> | prisma.AggregateTestResult
   }
}

// Types for TestResultEdge

type TestResultEdgeObject =
   | TestResultEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type TestResultEdgeFields = 'node' | 'cursor'

export interface TestResultEdgeFieldDetails {
   node: {
      type: 'TestResult'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestResultEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult> | prisma.TestResult
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateTestResult

type AggregateTestResultObject =
   | AggregateTestResultFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateTestResultFields = 'count'

export interface AggregateTestResultFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for TimeResultConnection

type TimeResultConnectionObject =
   | TimeResultConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type TimeResultConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface TimeResultConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TimeResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'TimeResultEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'TimeResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResultEdge[]> | prisma.TimeResultEdge[]
   }
   aggregate: {
      type: 'AggregateTimeResult'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TimeResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateTimeResult> | prisma.AggregateTimeResult
   }
}

// Types for TimeResultEdge

type TimeResultEdgeObject =
   | TimeResultEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type TimeResultEdgeFields = 'node' | 'cursor'

export interface TimeResultEdgeFieldDetails {
   node: {
      type: 'TimeResult'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TimeResultEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult> | prisma.TimeResult
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateTimeResult

type AggregateTimeResultObject =
   | AggregateTimeResultFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateTimeResultFields = 'count'

export interface AggregateTimeResultFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for StepResultConnection

type StepResultConnectionObject =
   | StepResultConnectionFields
   | { name: 'pageInfo'; args?: [] | false; alias?: string }
   | { name: 'edges'; args?: [] | false; alias?: string }
   | { name: 'aggregate'; args?: [] | false; alias?: string }

type StepResultConnectionFields = 'pageInfo' | 'edges' | 'aggregate'

export interface StepResultConnectionFieldDetails {
   pageInfo: {
      type: 'PageInfo'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.PageInfo> | prisma.PageInfo
   }
   edges: {
      type: 'StepResultEdge'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: (
         root: core.RootValue<'StepResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResultEdge[]> | prisma.StepResultEdge[]
   }
   aggregate: {
      type: 'AggregateStepResult'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepResultConnection'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.AggregateStepResult> | prisma.AggregateStepResult
   }
}

// Types for StepResultEdge

type StepResultEdgeObject =
   | StepResultEdgeFields
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'cursor'; args?: [] | false; alias?: string }

type StepResultEdgeFields = 'node' | 'cursor'

export interface StepResultEdgeFieldDetails {
   node: {
      type: 'StepResult'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepResultEdge'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult> | prisma.StepResult
   }
   cursor: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for AggregateStepResult

type AggregateStepResultObject =
   | AggregateStepResultFields
   | { name: 'count'; args?: [] | false; alias?: string }

type AggregateStepResultFields = 'count'

export interface AggregateStepResultFieldDetails {
   count: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for Mutation

type MutationObject =
   | MutationFields
   | {
        name: 'createView'
        args?: MutationCreateViewArgs[] | false
        alias?: string
     }
   | {
        name: 'updateView'
        args?: MutationUpdateViewArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertView'
        args?: MutationUpsertViewArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteView'
        args?: MutationDeleteViewArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyViews'
        args?: MutationDeleteManyViewsArgs[] | false
        alias?: string
     }
   | {
        name: 'createWelcome'
        args?: MutationCreateWelcomeArgs[] | false
        alias?: string
     }
   | {
        name: 'updateWelcome'
        args?: MutationUpdateWelcomeArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyWelcomes'
        args?: MutationUpdateManyWelcomesArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertWelcome'
        args?: MutationUpsertWelcomeArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteWelcome'
        args?: MutationDeleteWelcomeArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyWelcomes'
        args?: MutationDeleteManyWelcomesArgs[] | false
        alias?: string
     }
   | {
        name: 'createCompany'
        args?: MutationCreateCompanyArgs[] | false
        alias?: string
     }
   | {
        name: 'updateCompany'
        args?: MutationUpdateCompanyArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyCompanies'
        args?: MutationUpdateManyCompaniesArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertCompany'
        args?: MutationUpsertCompanyArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteCompany'
        args?: MutationDeleteCompanyArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyCompanies'
        args?: MutationDeleteManyCompaniesArgs[] | false
        alias?: string
     }
   | {
        name: 'createTest'
        args?: MutationCreateTestArgs[] | false
        alias?: string
     }
   | {
        name: 'updateTest'
        args?: MutationUpdateTestArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyTests'
        args?: MutationUpdateManyTestsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertTest'
        args?: MutationUpsertTestArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteTest'
        args?: MutationDeleteTestArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyTests'
        args?: MutationDeleteManyTestsArgs[] | false
        alias?: string
     }
   | {
        name: 'createMenu'
        args?: MutationCreateMenuArgs[] | false
        alias?: string
     }
   | {
        name: 'updateMenu'
        args?: MutationUpdateMenuArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyMenus'
        args?: MutationUpdateManyMenusArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertMenu'
        args?: MutationUpsertMenuArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteMenu'
        args?: MutationDeleteMenuArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyMenus'
        args?: MutationDeleteManyMenusArgs[] | false
        alias?: string
     }
   | {
        name: 'createStep'
        args?: MutationCreateStepArgs[] | false
        alias?: string
     }
   | {
        name: 'updateStep'
        args?: MutationUpdateStepArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManySteps'
        args?: MutationUpdateManyStepsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertStep'
        args?: MutationUpsertStepArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteStep'
        args?: MutationDeleteStepArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManySteps'
        args?: MutationDeleteManyStepsArgs[] | false
        alias?: string
     }
   | {
        name: 'createTestResult'
        args?: MutationCreateTestResultArgs[] | false
        alias?: string
     }
   | {
        name: 'updateTestResult'
        args?: MutationUpdateTestResultArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyTestResults'
        args?: MutationUpdateManyTestResultsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertTestResult'
        args?: MutationUpsertTestResultArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteTestResult'
        args?: MutationDeleteTestResultArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyTestResults'
        args?: MutationDeleteManyTestResultsArgs[] | false
        alias?: string
     }
   | {
        name: 'createTimeResult'
        args?: MutationCreateTimeResultArgs[] | false
        alias?: string
     }
   | {
        name: 'updateTimeResult'
        args?: MutationUpdateTimeResultArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyTimeResults'
        args?: MutationUpdateManyTimeResultsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertTimeResult'
        args?: MutationUpsertTimeResultArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteTimeResult'
        args?: MutationDeleteTimeResultArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyTimeResults'
        args?: MutationDeleteManyTimeResultsArgs[] | false
        alias?: string
     }
   | {
        name: 'createStepResult'
        args?: MutationCreateStepResultArgs[] | false
        alias?: string
     }
   | {
        name: 'updateStepResult'
        args?: MutationUpdateStepResultArgs[] | false
        alias?: string
     }
   | {
        name: 'updateManyStepResults'
        args?: MutationUpdateManyStepResultsArgs[] | false
        alias?: string
     }
   | {
        name: 'upsertStepResult'
        args?: MutationUpsertStepResultArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteStepResult'
        args?: MutationDeleteStepResultArgs[] | false
        alias?: string
     }
   | {
        name: 'deleteManyStepResults'
        args?: MutationDeleteManyStepResultsArgs[] | false
        alias?: string
     }

type MutationFields =
   | 'createView'
   | 'updateView'
   | 'upsertView'
   | 'deleteView'
   | 'deleteManyViews'
   | 'createWelcome'
   | 'updateWelcome'
   | 'updateManyWelcomes'
   | 'upsertWelcome'
   | 'deleteWelcome'
   | 'deleteManyWelcomes'
   | 'createCompany'
   | 'updateCompany'
   | 'updateManyCompanies'
   | 'upsertCompany'
   | 'deleteCompany'
   | 'deleteManyCompanies'
   | 'createTest'
   | 'updateTest'
   | 'updateManyTests'
   | 'upsertTest'
   | 'deleteTest'
   | 'deleteManyTests'
   | 'createMenu'
   | 'updateMenu'
   | 'updateManyMenus'
   | 'upsertMenu'
   | 'deleteMenu'
   | 'deleteManyMenus'
   | 'createStep'
   | 'updateStep'
   | 'updateManySteps'
   | 'upsertStep'
   | 'deleteStep'
   | 'deleteManySteps'
   | 'createTestResult'
   | 'updateTestResult'
   | 'updateManyTestResults'
   | 'upsertTestResult'
   | 'deleteTestResult'
   | 'deleteManyTestResults'
   | 'createTimeResult'
   | 'updateTimeResult'
   | 'updateManyTimeResults'
   | 'upsertTimeResult'
   | 'deleteTimeResult'
   | 'deleteManyTimeResults'
   | 'createStepResult'
   | 'updateStepResult'
   | 'updateManyStepResults'
   | 'upsertStepResult'
   | 'deleteStepResult'
   | 'deleteManyStepResults'

type MutationCreateViewArgs = 'data'
type MutationUpdateViewArgs = 'data' | 'where'
type MutationUpsertViewArgs = 'where' | 'create' | 'update'
type MutationDeleteViewArgs = 'where'
type MutationDeleteManyViewsArgs = 'where'
type MutationCreateWelcomeArgs = 'data'
type MutationUpdateWelcomeArgs = 'data' | 'where'
type MutationUpdateManyWelcomesArgs = 'data' | 'where'
type MutationUpsertWelcomeArgs = 'where' | 'create' | 'update'
type MutationDeleteWelcomeArgs = 'where'
type MutationDeleteManyWelcomesArgs = 'where'
type MutationCreateCompanyArgs = 'data'
type MutationUpdateCompanyArgs = 'data' | 'where'
type MutationUpdateManyCompaniesArgs = 'data' | 'where'
type MutationUpsertCompanyArgs = 'where' | 'create' | 'update'
type MutationDeleteCompanyArgs = 'where'
type MutationDeleteManyCompaniesArgs = 'where'
type MutationCreateTestArgs = 'data'
type MutationUpdateTestArgs = 'data' | 'where'
type MutationUpdateManyTestsArgs = 'data' | 'where'
type MutationUpsertTestArgs = 'where' | 'create' | 'update'
type MutationDeleteTestArgs = 'where'
type MutationDeleteManyTestsArgs = 'where'
type MutationCreateMenuArgs = 'data'
type MutationUpdateMenuArgs = 'data' | 'where'
type MutationUpdateManyMenusArgs = 'data' | 'where'
type MutationUpsertMenuArgs = 'where' | 'create' | 'update'
type MutationDeleteMenuArgs = 'where'
type MutationDeleteManyMenusArgs = 'where'
type MutationCreateStepArgs = 'data'
type MutationUpdateStepArgs = 'data' | 'where'
type MutationUpdateManyStepsArgs = 'data' | 'where'
type MutationUpsertStepArgs = 'where' | 'create' | 'update'
type MutationDeleteStepArgs = 'where'
type MutationDeleteManyStepsArgs = 'where'
type MutationCreateTestResultArgs = 'data'
type MutationUpdateTestResultArgs = 'data' | 'where'
type MutationUpdateManyTestResultsArgs = 'data' | 'where'
type MutationUpsertTestResultArgs = 'where' | 'create' | 'update'
type MutationDeleteTestResultArgs = 'where'
type MutationDeleteManyTestResultsArgs = 'where'
type MutationCreateTimeResultArgs = 'data'
type MutationUpdateTimeResultArgs = 'data' | 'where'
type MutationUpdateManyTimeResultsArgs = 'data' | 'where'
type MutationUpsertTimeResultArgs = 'where' | 'create' | 'update'
type MutationDeleteTimeResultArgs = 'where'
type MutationDeleteManyTimeResultsArgs = 'where'
type MutationCreateStepResultArgs = 'data'
type MutationUpdateStepResultArgs = 'data' | 'where'
type MutationUpdateManyStepResultsArgs = 'data' | 'where'
type MutationUpsertStepResultArgs = 'where' | 'create' | 'update'
type MutationDeleteStepResultArgs = 'where'
type MutationDeleteManyStepResultsArgs = 'where'

export interface MutationFieldDetails {
   createView: {
      type: 'View'
      args: Record<MutationCreateViewArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: ViewCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.View> | prisma.View
   }
   updateView: {
      type: 'View'
      args: Record<MutationUpdateViewArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: ViewUpdateInput; where: ViewWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.View | null> | prisma.View | null
   }
   upsertView: {
      type: 'View'
      args: Record<MutationUpsertViewArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: ViewWhereUniqueInput
            create: ViewCreateInput
            update: ViewUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.View> | prisma.View
   }
   deleteView: {
      type: 'View'
      args: Record<MutationDeleteViewArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: ViewWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.View | null> | prisma.View | null
   }
   deleteManyViews: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyViewsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: ViewWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createWelcome: {
      type: 'Welcome'
      args: Record<MutationCreateWelcomeArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: WelcomeCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome> | prisma.Welcome
   }
   updateWelcome: {
      type: 'Welcome'
      args: Record<MutationUpdateWelcomeArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: WelcomeUpdateInput; where: WelcomeWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome | null> | prisma.Welcome | null
   }
   updateManyWelcomes: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyWelcomesArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: WelcomeUpdateManyMutationInput
            where?: WelcomeWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertWelcome: {
      type: 'Welcome'
      args: Record<MutationUpsertWelcomeArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: WelcomeWhereUniqueInput
            create: WelcomeCreateInput
            update: WelcomeUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome> | prisma.Welcome
   }
   deleteWelcome: {
      type: 'Welcome'
      args: Record<MutationDeleteWelcomeArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: WelcomeWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome | null> | prisma.Welcome | null
   }
   deleteManyWelcomes: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyWelcomesArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: WelcomeWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createCompany: {
      type: 'Company'
      args: Record<MutationCreateCompanyArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: CompanyCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company> | prisma.Company
   }
   updateCompany: {
      type: 'Company'
      args: Record<MutationUpdateCompanyArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: CompanyUpdateInput; where: CompanyWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company | null> | prisma.Company | null
   }
   updateManyCompanies: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyCompaniesArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: CompanyUpdateManyMutationInput
            where?: CompanyWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertCompany: {
      type: 'Company'
      args: Record<MutationUpsertCompanyArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: CompanyWhereUniqueInput
            create: CompanyCreateInput
            update: CompanyUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company> | prisma.Company
   }
   deleteCompany: {
      type: 'Company'
      args: Record<MutationDeleteCompanyArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: CompanyWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company | null> | prisma.Company | null
   }
   deleteManyCompanies: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyCompaniesArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: CompanyWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createTest: {
      type: 'Test'
      args: Record<MutationCreateTestArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: TestCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test> | prisma.Test
   }
   updateTest: {
      type: 'Test'
      args: Record<MutationUpdateTestArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: TestUpdateInput; where: TestWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test | null> | prisma.Test | null
   }
   updateManyTests: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyTestsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: TestUpdateManyMutationInput
            where?: TestWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertTest: {
      type: 'Test'
      args: Record<MutationUpsertTestArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: TestWhereUniqueInput
            create: TestCreateInput
            update: TestUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test> | prisma.Test
   }
   deleteTest: {
      type: 'Test'
      args: Record<MutationDeleteTestArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: TestWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test | null> | prisma.Test | null
   }
   deleteManyTests: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyTestsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: TestWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createMenu: {
      type: 'Menu'
      args: Record<MutationCreateMenuArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: MenuCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu> | prisma.Menu
   }
   updateMenu: {
      type: 'Menu'
      args: Record<MutationUpdateMenuArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: MenuUpdateInput; where: MenuWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu | null> | prisma.Menu | null
   }
   updateManyMenus: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyMenusArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: MenuUpdateManyMutationInput
            where?: MenuWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertMenu: {
      type: 'Menu'
      args: Record<MutationUpsertMenuArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: MenuWhereUniqueInput
            create: MenuCreateInput
            update: MenuUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu> | prisma.Menu
   }
   deleteMenu: {
      type: 'Menu'
      args: Record<MutationDeleteMenuArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: MenuWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu | null> | prisma.Menu | null
   }
   deleteManyMenus: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyMenusArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: MenuWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createStep: {
      type: 'Step'
      args: Record<MutationCreateStepArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: StepCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step> | prisma.Step
   }
   updateStep: {
      type: 'Step'
      args: Record<MutationUpdateStepArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: StepUpdateInput; where: StepWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step | null> | prisma.Step | null
   }
   updateManySteps: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyStepsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: StepUpdateManyMutationInput
            where?: StepWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertStep: {
      type: 'Step'
      args: Record<MutationUpsertStepArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: StepWhereUniqueInput
            create: StepCreateInput
            update: StepUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step> | prisma.Step
   }
   deleteStep: {
      type: 'Step'
      args: Record<MutationDeleteStepArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: StepWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step | null> | prisma.Step | null
   }
   deleteManySteps: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyStepsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: StepWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createTestResult: {
      type: 'TestResult'
      args: Record<MutationCreateTestResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: TestResultCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult> | prisma.TestResult
   }
   updateTestResult: {
      type: 'TestResult'
      args: Record<MutationUpdateTestResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: TestResultUpdateInput
            where: TestResultWhereUniqueInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult | null> | prisma.TestResult | null
   }
   updateManyTestResults: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyTestResultsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: TestResultUpdateManyMutationInput
            where?: TestResultWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertTestResult: {
      type: 'TestResult'
      args: Record<MutationUpsertTestResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: TestResultWhereUniqueInput
            create: TestResultCreateInput
            update: TestResultUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult> | prisma.TestResult
   }
   deleteTestResult: {
      type: 'TestResult'
      args: Record<MutationDeleteTestResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: TestResultWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult | null> | prisma.TestResult | null
   }
   deleteManyTestResults: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyTestResultsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: TestResultWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createTimeResult: {
      type: 'TimeResult'
      args: Record<MutationCreateTimeResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: TimeResultCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult> | prisma.TimeResult
   }
   updateTimeResult: {
      type: 'TimeResult'
      args: Record<MutationUpdateTimeResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: TimeResultUpdateInput
            where: TimeResultWhereUniqueInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult | null> | prisma.TimeResult | null
   }
   updateManyTimeResults: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyTimeResultsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: TimeResultUpdateManyMutationInput
            where?: TimeResultWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertTimeResult: {
      type: 'TimeResult'
      args: Record<MutationUpsertTimeResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: TimeResultWhereUniqueInput
            create: TimeResultCreateInput
            update: TimeResultUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult> | prisma.TimeResult
   }
   deleteTimeResult: {
      type: 'TimeResult'
      args: Record<MutationDeleteTimeResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: TimeResultWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult | null> | prisma.TimeResult | null
   }
   deleteManyTimeResults: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyTimeResultsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: TimeResultWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   createStepResult: {
      type: 'StepResult'
      args: Record<MutationCreateStepResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { data: StepResultCreateInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult> | prisma.StepResult
   }
   updateStepResult: {
      type: 'StepResult'
      args: Record<MutationUpdateStepResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: StepResultUpdateInput
            where: StepResultWhereUniqueInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult | null> | prisma.StepResult | null
   }
   updateManyStepResults: {
      type: 'BatchPayload'
      args: Record<MutationUpdateManyStepResultsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            data: StepResultUpdateManyMutationInput
            where?: StepResultWhereInput | null
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
   upsertStepResult: {
      type: 'StepResult'
      args: Record<MutationUpsertStepResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: {
            where: StepResultWhereUniqueInput
            create: StepResultCreateInput
            update: StepResultUpdateInput
         },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult> | prisma.StepResult
   }
   deleteStepResult: {
      type: 'StepResult'
      args: Record<MutationDeleteStepResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where: StepResultWhereUniqueInput },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult | null> | prisma.StepResult | null
   }
   deleteManyStepResults: {
      type: 'BatchPayload'
      args: Record<MutationDeleteManyStepResultsArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'Mutation'>,
         args: { where?: StepResultWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
   }
}

// Types for BatchPayload

type BatchPayloadObject =
   | BatchPayloadFields
   | { name: 'count'; args?: [] | false; alias?: string }

type BatchPayloadFields = 'count'

export interface BatchPayloadFieldDetails {
   count: {
      type: 'Long'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for Subscription

type SubscriptionObject =
   | SubscriptionFields
   | { name: 'view'; args?: SubscriptionViewArgs[] | false; alias?: string }
   | {
        name: 'welcome'
        args?: SubscriptionWelcomeArgs[] | false
        alias?: string
     }
   | {
        name: 'company'
        args?: SubscriptionCompanyArgs[] | false
        alias?: string
     }
   | { name: 'test'; args?: SubscriptionTestArgs[] | false; alias?: string }
   | { name: 'menu'; args?: SubscriptionMenuArgs[] | false; alias?: string }
   | { name: 'step'; args?: SubscriptionStepArgs[] | false; alias?: string }
   | {
        name: 'testResult'
        args?: SubscriptionTestResultArgs[] | false
        alias?: string
     }
   | {
        name: 'timeResult'
        args?: SubscriptionTimeResultArgs[] | false
        alias?: string
     }
   | {
        name: 'stepResult'
        args?: SubscriptionStepResultArgs[] | false
        alias?: string
     }

type SubscriptionFields =
   | 'view'
   | 'welcome'
   | 'company'
   | 'test'
   | 'menu'
   | 'step'
   | 'testResult'
   | 'timeResult'
   | 'stepResult'

type SubscriptionViewArgs = 'where'
type SubscriptionWelcomeArgs = 'where'
type SubscriptionCompanyArgs = 'where'
type SubscriptionTestArgs = 'where'
type SubscriptionMenuArgs = 'where'
type SubscriptionStepArgs = 'where'
type SubscriptionTestResultArgs = 'where'
type SubscriptionTimeResultArgs = 'where'
type SubscriptionStepResultArgs = 'where'

export interface SubscriptionFieldDetails {
   view: {
      type: 'ViewSubscriptionPayload'
      args: Record<SubscriptionViewArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: ViewSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.ViewSubscriptionPayload | null>
         | prisma.ViewSubscriptionPayload
         | null
   }
   welcome: {
      type: 'WelcomeSubscriptionPayload'
      args: Record<SubscriptionWelcomeArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: WelcomeSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.WelcomeSubscriptionPayload | null>
         | prisma.WelcomeSubscriptionPayload
         | null
   }
   company: {
      type: 'CompanySubscriptionPayload'
      args: Record<SubscriptionCompanyArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: CompanySubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.CompanySubscriptionPayload | null>
         | prisma.CompanySubscriptionPayload
         | null
   }
   test: {
      type: 'TestSubscriptionPayload'
      args: Record<SubscriptionTestArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: TestSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.TestSubscriptionPayload | null>
         | prisma.TestSubscriptionPayload
         | null
   }
   menu: {
      type: 'MenuSubscriptionPayload'
      args: Record<SubscriptionMenuArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: MenuSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.MenuSubscriptionPayload | null>
         | prisma.MenuSubscriptionPayload
         | null
   }
   step: {
      type: 'StepSubscriptionPayload'
      args: Record<SubscriptionStepArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: StepSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.StepSubscriptionPayload | null>
         | prisma.StepSubscriptionPayload
         | null
   }
   testResult: {
      type: 'TestResultSubscriptionPayload'
      args: Record<SubscriptionTestResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: TestResultSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.TestResultSubscriptionPayload | null>
         | prisma.TestResultSubscriptionPayload
         | null
   }
   timeResult: {
      type: 'TimeResultSubscriptionPayload'
      args: Record<SubscriptionTimeResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: TimeResultSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.TimeResultSubscriptionPayload | null>
         | prisma.TimeResultSubscriptionPayload
         | null
   }
   stepResult: {
      type: 'StepResultSubscriptionPayload'
      args: Record<SubscriptionStepResultArgs, core.NexusArgDef<string>>
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'Subscription'>,
         args: { where?: StepResultSubscriptionWhereInput | null },
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.StepResultSubscriptionPayload | null>
         | prisma.StepResultSubscriptionPayload
         | null
   }
}

// Types for ViewSubscriptionPayload

type ViewSubscriptionPayloadObject =
   | ViewSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type ViewSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface ViewSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'ViewSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'View'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'ViewSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.View | null> | prisma.View | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'ViewPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'ViewSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.ViewPreviousValues | null>
         | prisma.ViewPreviousValues
         | null
   }
}

// Types for ViewPreviousValues

type ViewPreviousValuesObject =
   | ViewPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }

type ViewPreviousValuesFields = 'id'

export interface ViewPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for WelcomeSubscriptionPayload

type WelcomeSubscriptionPayloadObject =
   | WelcomeSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type WelcomeSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface WelcomeSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'WelcomeSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Welcome'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'WelcomeSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Welcome | null> | prisma.Welcome | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'WelcomePreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'WelcomeSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.WelcomePreviousValues | null>
         | prisma.WelcomePreviousValues
         | null
   }
}

// Types for WelcomePreviousValues

type WelcomePreviousValuesObject =
   | WelcomePreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'title'; args?: [] | false; alias?: string }
   | { name: 'message'; args?: [] | false; alias?: string }

type WelcomePreviousValuesFields = 'id' | 'title' | 'message'

export interface WelcomePreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   title: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   message: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for CompanySubscriptionPayload

type CompanySubscriptionPayloadObject =
   | CompanySubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type CompanySubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface CompanySubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'CompanySubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Company'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'CompanySubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Company | null> | prisma.Company | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'CompanyPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'CompanySubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.CompanyPreviousValues | null>
         | prisma.CompanyPreviousValues
         | null
   }
}

// Types for CompanyPreviousValues

type CompanyPreviousValuesObject =
   | CompanyPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'name'; args?: [] | false; alias?: string }
   | { name: 'abbr'; args?: [] | false; alias?: string }
   | { name: 'logo'; args?: [] | false; alias?: string }

type CompanyPreviousValuesFields = 'id' | 'name' | 'abbr' | 'logo'

export interface CompanyPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   name: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   abbr: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   logo: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
}

// Types for TestSubscriptionPayload

type TestSubscriptionPayloadObject =
   | TestSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type TestSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface TestSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Test'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TestSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Test | null> | prisma.Test | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'TestPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TestSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.TestPreviousValues | null>
         | prisma.TestPreviousValues
         | null
   }
}

// Types for TestPreviousValues

type TestPreviousValuesObject =
   | TestPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'title'; args?: [] | false; alias?: string }

type TestPreviousValuesFields = 'id' | 'title'

export interface TestPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   title: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for MenuSubscriptionPayload

type MenuSubscriptionPayloadObject =
   | MenuSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type MenuSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface MenuSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'MenuSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Menu'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'MenuSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Menu | null> | prisma.Menu | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'MenuPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'MenuSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.MenuPreviousValues | null>
         | prisma.MenuPreviousValues
         | null
   }
}

// Types for MenuPreviousValues

type MenuPreviousValuesObject =
   | MenuPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'name'; args?: [] | false; alias?: string }

type MenuPreviousValuesFields = 'id' | 'name'

export interface MenuPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   name: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for StepSubscriptionPayload

type StepSubscriptionPayloadObject =
   | StepSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type StepSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface StepSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'Step'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'StepSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.Step | null> | prisma.Step | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'StepPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'StepSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.StepPreviousValues | null>
         | prisma.StepPreviousValues
         | null
   }
}

// Types for StepPreviousValues

type StepPreviousValuesObject =
   | StepPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'question'; args?: [] | false; alias?: string }

type StepPreviousValuesFields = 'id' | 'question'

export interface StepPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   question: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for TestResultSubscriptionPayload

type TestResultSubscriptionPayloadObject =
   | TestResultSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type TestResultSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface TestResultSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'TestResult'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TestResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TestResult | null> | prisma.TestResult | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'TestResultPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TestResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.TestResultPreviousValues | null>
         | prisma.TestResultPreviousValues
         | null
   }
}

// Types for TestResultPreviousValues

type TestResultPreviousValuesObject =
   | TestResultPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'start'; args?: [] | false; alias?: string }
   | { name: 'end'; args?: [] | false; alias?: string }
   | { name: 'status'; args?: [] | false; alias?: string }

type TestResultPreviousValuesFields = 'id' | 'start' | 'end' | 'status'

export interface TestResultPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   start: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   end: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   status: {
      type: 'ResultStatus'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TestResultPreviousValues'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.ResultStatus> | prisma.ResultStatus
   }
}

// Types for TimeResultSubscriptionPayload

type TimeResultSubscriptionPayloadObject =
   | TimeResultSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type TimeResultSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface TimeResultSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'TimeResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'TimeResult'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TimeResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.TimeResult | null> | prisma.TimeResult | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'TimeResultPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'TimeResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.TimeResultPreviousValues | null>
         | prisma.TimeResultPreviousValues
         | null
   }
}

// Types for TimeResultPreviousValues

type TimeResultPreviousValuesObject =
   | TimeResultPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'int'; args?: [] | false; alias?: string }
   | { name: 'text'; args?: [] | false; alias?: string }

type TimeResultPreviousValuesFields = 'id' | 'int' | 'text'

export interface TimeResultPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   int: {
      type: 'Int'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   text: {
      type: 'String'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
}

// Types for StepResultSubscriptionPayload

type StepResultSubscriptionPayloadObject =
   | StepResultSubscriptionPayloadFields
   | { name: 'mutation'; args?: [] | false; alias?: string }
   | { name: 'node'; args?: [] | false; alias?: string }
   | { name: 'updatedFields'; args?: [] | false; alias?: string }
   | { name: 'previousValues'; args?: [] | false; alias?: string }

type StepResultSubscriptionPayloadFields =
   | 'mutation'
   | 'node'
   | 'updatedFields'
   | 'previousValues'

export interface StepResultSubscriptionPayloadFieldDetails {
   mutation: {
      type: 'MutationType'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.MutationType> | prisma.MutationType
   }
   node: {
      type: 'StepResult'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'StepResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.StepResult | null> | prisma.StepResult | null
   }
   updatedFields: {
      type: 'String'
      args: {}
      description: string
      list: true
      nullable: false
      resolve: undefined
   }
   previousValues: {
      type: 'StepResultPreviousValues'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: (
         root: core.RootValue<'StepResultSubscriptionPayload'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) =>
         | Promise<prisma.StepResultPreviousValues | null>
         | prisma.StepResultPreviousValues
         | null
   }
}

// Types for StepResultPreviousValues

type StepResultPreviousValuesObject =
   | StepResultPreviousValuesFields
   | { name: 'id'; args?: [] | false; alias?: string }
   | { name: 'start'; args?: [] | false; alias?: string }
   | { name: 'end'; args?: [] | false; alias?: string }
   | { name: 'status'; args?: [] | false; alias?: string }

type StepResultPreviousValuesFields = 'id' | 'start' | 'end' | 'status'

export interface StepResultPreviousValuesFieldDetails {
   id: {
      type: 'ID'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   start: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: undefined
   }
   end: {
      type: 'DateTime'
      args: {}
      description: string
      list: undefined
      nullable: true
      resolve: undefined
   }
   status: {
      type: 'ResultStatus'
      args: {}
      description: string
      list: undefined
      nullable: false
      resolve: (
         root: core.RootValue<'StepResultPreviousValues'>,
         args: {},
         context: core.GetGen<'context'>,
         info?: GraphQLResolveInfo,
      ) => Promise<prisma.ResultStatus> | prisma.ResultStatus
   }
}

export interface ViewWhereUniqueInput {
   id?: string | null
}
export type ViewWhereUniqueInputInputObject =
   | Extract<keyof ViewWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface MenuWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   menu?: MenuWhereInput | null
   name?: string | null
   name_not?: string | null
   name_in?: string[]
   name_not_in?: string[]
   name_lt?: string | null
   name_lte?: string | null
   name_gt?: string | null
   name_gte?: string | null
   name_contains?: string | null
   name_not_contains?: string | null
   name_starts_with?: string | null
   name_not_starts_with?: string | null
   name_ends_with?: string | null
   name_not_ends_with?: string | null
   items_some?: MenuWhereInput | null
   AND?: MenuWhereInput[]
}
export type MenuWhereInputInputObject =
   | Extract<keyof MenuWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'menu'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'name_not'; alias?: string }
   | { name: 'name_in'; alias?: string }
   | { name: 'name_not_in'; alias?: string }
   | { name: 'name_lt'; alias?: string }
   | { name: 'name_lte'; alias?: string }
   | { name: 'name_gt'; alias?: string }
   | { name: 'name_gte'; alias?: string }
   | { name: 'name_contains'; alias?: string }
   | { name: 'name_not_contains'; alias?: string }
   | { name: 'name_starts_with'; alias?: string }
   | { name: 'name_not_starts_with'; alias?: string }
   | { name: 'name_ends_with'; alias?: string }
   | { name: 'name_not_ends_with'; alias?: string }
   | { name: 'items_some'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TestWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   title?: string | null
   title_not?: string | null
   title_in?: string[]
   title_not_in?: string[]
   title_lt?: string | null
   title_lte?: string | null
   title_gt?: string | null
   title_gte?: string | null
   title_contains?: string | null
   title_not_contains?: string | null
   title_starts_with?: string | null
   title_not_starts_with?: string | null
   title_ends_with?: string | null
   title_not_ends_with?: string | null
   steps_some?: StepWhereInput | null
   menus_some?: MenuWhereInput | null
   results_some?: TestResultWhereInput | null
   AND?: TestWhereInput[]
}
export type TestWhereInputInputObject =
   | Extract<keyof TestWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'title_not'; alias?: string }
   | { name: 'title_in'; alias?: string }
   | { name: 'title_not_in'; alias?: string }
   | { name: 'title_lt'; alias?: string }
   | { name: 'title_lte'; alias?: string }
   | { name: 'title_gt'; alias?: string }
   | { name: 'title_gte'; alias?: string }
   | { name: 'title_contains'; alias?: string }
   | { name: 'title_not_contains'; alias?: string }
   | { name: 'title_starts_with'; alias?: string }
   | { name: 'title_not_starts_with'; alias?: string }
   | { name: 'title_ends_with'; alias?: string }
   | { name: 'title_not_ends_with'; alias?: string }
   | { name: 'steps_some'; alias?: string }
   | { name: 'menus_some'; alias?: string }
   | { name: 'results_some'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface StepWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   question?: string | null
   question_not?: string | null
   question_in?: string[]
   question_not_in?: string[]
   question_lt?: string | null
   question_lte?: string | null
   question_gt?: string | null
   question_gte?: string | null
   question_contains?: string | null
   question_not_contains?: string | null
   question_starts_with?: string | null
   question_not_starts_with?: string | null
   question_ends_with?: string | null
   question_not_ends_with?: string | null
   target?: MenuWhereInput | null
   path_some?: MenuWhereInput | null
   results_some?: StepResultWhereInput | null
   AND?: StepWhereInput[]
}
export type StepWhereInputInputObject =
   | Extract<keyof StepWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'question'; alias?: string }
   | { name: 'question_not'; alias?: string }
   | { name: 'question_in'; alias?: string }
   | { name: 'question_not_in'; alias?: string }
   | { name: 'question_lt'; alias?: string }
   | { name: 'question_lte'; alias?: string }
   | { name: 'question_gt'; alias?: string }
   | { name: 'question_gte'; alias?: string }
   | { name: 'question_contains'; alias?: string }
   | { name: 'question_not_contains'; alias?: string }
   | { name: 'question_starts_with'; alias?: string }
   | { name: 'question_not_starts_with'; alias?: string }
   | { name: 'question_ends_with'; alias?: string }
   | { name: 'question_not_ends_with'; alias?: string }
   | { name: 'target'; alias?: string }
   | { name: 'path_some'; alias?: string }
   | { name: 'results_some'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface StepResultWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   parent?: StepWhereInput | null
   resultParent?: TestResultWhereInput | null
   start?: string | null
   start_not?: string | null
   start_in?: string[]
   start_not_in?: string[]
   start_lt?: string | null
   start_lte?: string | null
   start_gt?: string | null
   start_gte?: string | null
   end?: string | null
   end_not?: string | null
   end_in?: string[]
   end_not_in?: string[]
   end_lt?: string | null
   end_lte?: string | null
   end_gt?: string | null
   end_gte?: string | null
   time?: TimeResultWhereInput | null
   path_some?: MenuWhereInput | null
   status?: prisma.ResultStatus | null
   status_not?: prisma.ResultStatus | null
   status_in?: prisma.ResultStatus[]
   status_not_in?: prisma.ResultStatus[]
   AND?: StepResultWhereInput[]
}
export type StepResultWhereInputInputObject =
   | Extract<keyof StepResultWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'parent'; alias?: string }
   | { name: 'resultParent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'start_not'; alias?: string }
   | { name: 'start_in'; alias?: string }
   | { name: 'start_not_in'; alias?: string }
   | { name: 'start_lt'; alias?: string }
   | { name: 'start_lte'; alias?: string }
   | { name: 'start_gt'; alias?: string }
   | { name: 'start_gte'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'end_not'; alias?: string }
   | { name: 'end_in'; alias?: string }
   | { name: 'end_not_in'; alias?: string }
   | { name: 'end_lt'; alias?: string }
   | { name: 'end_lte'; alias?: string }
   | { name: 'end_gt'; alias?: string }
   | { name: 'end_gte'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'path_some'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'status_not'; alias?: string }
   | { name: 'status_in'; alias?: string }
   | { name: 'status_not_in'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TestResultWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   parent?: TestWhereInput | null
   start?: string | null
   start_not?: string | null
   start_in?: string[]
   start_not_in?: string[]
   start_lt?: string | null
   start_lte?: string | null
   start_gt?: string | null
   start_gte?: string | null
   end?: string | null
   end_not?: string | null
   end_in?: string[]
   end_not_in?: string[]
   end_lt?: string | null
   end_lte?: string | null
   end_gt?: string | null
   end_gte?: string | null
   time?: TimeResultWhereInput | null
   steps_some?: StepResultWhereInput | null
   status?: prisma.ResultStatus | null
   status_not?: prisma.ResultStatus | null
   status_in?: prisma.ResultStatus[]
   status_not_in?: prisma.ResultStatus[]
   AND?: TestResultWhereInput[]
}
export type TestResultWhereInputInputObject =
   | Extract<keyof TestResultWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'parent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'start_not'; alias?: string }
   | { name: 'start_in'; alias?: string }
   | { name: 'start_not_in'; alias?: string }
   | { name: 'start_lt'; alias?: string }
   | { name: 'start_lte'; alias?: string }
   | { name: 'start_gt'; alias?: string }
   | { name: 'start_gte'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'end_not'; alias?: string }
   | { name: 'end_in'; alias?: string }
   | { name: 'end_not_in'; alias?: string }
   | { name: 'end_lt'; alias?: string }
   | { name: 'end_lte'; alias?: string }
   | { name: 'end_gt'; alias?: string }
   | { name: 'end_gte'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'steps_some'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'status_not'; alias?: string }
   | { name: 'status_in'; alias?: string }
   | { name: 'status_not_in'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TimeResultWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   int?: number | null
   int_not?: number | null
   int_in?: number[]
   int_not_in?: number[]
   int_lt?: number | null
   int_lte?: number | null
   int_gt?: number | null
   int_gte?: number | null
   text?: string | null
   text_not?: string | null
   text_in?: string[]
   text_not_in?: string[]
   text_lt?: string | null
   text_lte?: string | null
   text_gt?: string | null
   text_gte?: string | null
   text_contains?: string | null
   text_not_contains?: string | null
   text_starts_with?: string | null
   text_not_starts_with?: string | null
   text_ends_with?: string | null
   text_not_ends_with?: string | null
   AND?: TimeResultWhereInput[]
}
export type TimeResultWhereInputInputObject =
   | Extract<keyof TimeResultWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'int'; alias?: string }
   | { name: 'int_not'; alias?: string }
   | { name: 'int_in'; alias?: string }
   | { name: 'int_not_in'; alias?: string }
   | { name: 'int_lt'; alias?: string }
   | { name: 'int_lte'; alias?: string }
   | { name: 'int_gt'; alias?: string }
   | { name: 'int_gte'; alias?: string }
   | { name: 'text'; alias?: string }
   | { name: 'text_not'; alias?: string }
   | { name: 'text_in'; alias?: string }
   | { name: 'text_not_in'; alias?: string }
   | { name: 'text_lt'; alias?: string }
   | { name: 'text_lte'; alias?: string }
   | { name: 'text_gt'; alias?: string }
   | { name: 'text_gte'; alias?: string }
   | { name: 'text_contains'; alias?: string }
   | { name: 'text_not_contains'; alias?: string }
   | { name: 'text_starts_with'; alias?: string }
   | { name: 'text_not_starts_with'; alias?: string }
   | { name: 'text_ends_with'; alias?: string }
   | { name: 'text_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface ViewWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   welcome?: WelcomeWhereInput | null
   company?: CompanyWhereInput | null
   menus_some?: MenuWhereInput | null
   tests_some?: TestWhereInput | null
   steps_some?: StepWhereInput | null
   AND?: ViewWhereInput[]
}
export type ViewWhereInputInputObject =
   | Extract<keyof ViewWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'welcome'; alias?: string }
   | { name: 'company'; alias?: string }
   | { name: 'menus_some'; alias?: string }
   | { name: 'tests_some'; alias?: string }
   | { name: 'steps_some'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface WelcomeWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   title?: string | null
   title_not?: string | null
   title_in?: string[]
   title_not_in?: string[]
   title_lt?: string | null
   title_lte?: string | null
   title_gt?: string | null
   title_gte?: string | null
   title_contains?: string | null
   title_not_contains?: string | null
   title_starts_with?: string | null
   title_not_starts_with?: string | null
   title_ends_with?: string | null
   title_not_ends_with?: string | null
   message?: string | null
   message_not?: string | null
   message_in?: string[]
   message_not_in?: string[]
   message_lt?: string | null
   message_lte?: string | null
   message_gt?: string | null
   message_gte?: string | null
   message_contains?: string | null
   message_not_contains?: string | null
   message_starts_with?: string | null
   message_not_starts_with?: string | null
   message_ends_with?: string | null
   message_not_ends_with?: string | null
   AND?: WelcomeWhereInput[]
}
export type WelcomeWhereInputInputObject =
   | Extract<keyof WelcomeWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'title_not'; alias?: string }
   | { name: 'title_in'; alias?: string }
   | { name: 'title_not_in'; alias?: string }
   | { name: 'title_lt'; alias?: string }
   | { name: 'title_lte'; alias?: string }
   | { name: 'title_gt'; alias?: string }
   | { name: 'title_gte'; alias?: string }
   | { name: 'title_contains'; alias?: string }
   | { name: 'title_not_contains'; alias?: string }
   | { name: 'title_starts_with'; alias?: string }
   | { name: 'title_not_starts_with'; alias?: string }
   | { name: 'title_ends_with'; alias?: string }
   | { name: 'title_not_ends_with'; alias?: string }
   | { name: 'message'; alias?: string }
   | { name: 'message_not'; alias?: string }
   | { name: 'message_in'; alias?: string }
   | { name: 'message_not_in'; alias?: string }
   | { name: 'message_lt'; alias?: string }
   | { name: 'message_lte'; alias?: string }
   | { name: 'message_gt'; alias?: string }
   | { name: 'message_gte'; alias?: string }
   | { name: 'message_contains'; alias?: string }
   | { name: 'message_not_contains'; alias?: string }
   | { name: 'message_starts_with'; alias?: string }
   | { name: 'message_not_starts_with'; alias?: string }
   | { name: 'message_ends_with'; alias?: string }
   | { name: 'message_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface CompanyWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   name?: string | null
   name_not?: string | null
   name_in?: string[]
   name_not_in?: string[]
   name_lt?: string | null
   name_lte?: string | null
   name_gt?: string | null
   name_gte?: string | null
   name_contains?: string | null
   name_not_contains?: string | null
   name_starts_with?: string | null
   name_not_starts_with?: string | null
   name_ends_with?: string | null
   name_not_ends_with?: string | null
   abbr?: string | null
   abbr_not?: string | null
   abbr_in?: string[]
   abbr_not_in?: string[]
   abbr_lt?: string | null
   abbr_lte?: string | null
   abbr_gt?: string | null
   abbr_gte?: string | null
   abbr_contains?: string | null
   abbr_not_contains?: string | null
   abbr_starts_with?: string | null
   abbr_not_starts_with?: string | null
   abbr_ends_with?: string | null
   abbr_not_ends_with?: string | null
   logo?: string | null
   logo_not?: string | null
   logo_in?: string[]
   logo_not_in?: string[]
   logo_lt?: string | null
   logo_lte?: string | null
   logo_gt?: string | null
   logo_gte?: string | null
   logo_contains?: string | null
   logo_not_contains?: string | null
   logo_starts_with?: string | null
   logo_not_starts_with?: string | null
   logo_ends_with?: string | null
   logo_not_ends_with?: string | null
   AND?: CompanyWhereInput[]
}
export type CompanyWhereInputInputObject =
   | Extract<keyof CompanyWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'name_not'; alias?: string }
   | { name: 'name_in'; alias?: string }
   | { name: 'name_not_in'; alias?: string }
   | { name: 'name_lt'; alias?: string }
   | { name: 'name_lte'; alias?: string }
   | { name: 'name_gt'; alias?: string }
   | { name: 'name_gte'; alias?: string }
   | { name: 'name_contains'; alias?: string }
   | { name: 'name_not_contains'; alias?: string }
   | { name: 'name_starts_with'; alias?: string }
   | { name: 'name_not_starts_with'; alias?: string }
   | { name: 'name_ends_with'; alias?: string }
   | { name: 'name_not_ends_with'; alias?: string }
   | { name: 'abbr'; alias?: string }
   | { name: 'abbr_not'; alias?: string }
   | { name: 'abbr_in'; alias?: string }
   | { name: 'abbr_not_in'; alias?: string }
   | { name: 'abbr_lt'; alias?: string }
   | { name: 'abbr_lte'; alias?: string }
   | { name: 'abbr_gt'; alias?: string }
   | { name: 'abbr_gte'; alias?: string }
   | { name: 'abbr_contains'; alias?: string }
   | { name: 'abbr_not_contains'; alias?: string }
   | { name: 'abbr_starts_with'; alias?: string }
   | { name: 'abbr_not_starts_with'; alias?: string }
   | { name: 'abbr_ends_with'; alias?: string }
   | { name: 'abbr_not_ends_with'; alias?: string }
   | { name: 'logo'; alias?: string }
   | { name: 'logo_not'; alias?: string }
   | { name: 'logo_in'; alias?: string }
   | { name: 'logo_not_in'; alias?: string }
   | { name: 'logo_lt'; alias?: string }
   | { name: 'logo_lte'; alias?: string }
   | { name: 'logo_gt'; alias?: string }
   | { name: 'logo_gte'; alias?: string }
   | { name: 'logo_contains'; alias?: string }
   | { name: 'logo_not_contains'; alias?: string }
   | { name: 'logo_starts_with'; alias?: string }
   | { name: 'logo_not_starts_with'; alias?: string }
   | { name: 'logo_ends_with'; alias?: string }
   | { name: 'logo_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface WelcomeWhereUniqueInput {
   id?: string | null
}
export type WelcomeWhereUniqueInputInputObject =
   | Extract<keyof WelcomeWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface CompanyWhereUniqueInput {
   id?: string | null
}
export type CompanyWhereUniqueInputInputObject =
   | Extract<keyof CompanyWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface TestWhereUniqueInput {
   id?: string | null
}
export type TestWhereUniqueInputInputObject =
   | Extract<keyof TestWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface MenuWhereUniqueInput {
   id?: string | null
}
export type MenuWhereUniqueInputInputObject =
   | Extract<keyof MenuWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface StepWhereUniqueInput {
   id?: string | null
}
export type StepWhereUniqueInputInputObject =
   | Extract<keyof StepWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface TestResultWhereUniqueInput {
   id?: string | null
}
export type TestResultWhereUniqueInputInputObject =
   | Extract<keyof TestResultWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface TimeResultWhereUniqueInput {
   id?: string | null
}
export type TimeResultWhereUniqueInputInputObject =
   | Extract<keyof TimeResultWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface StepResultWhereUniqueInput {
   id?: string | null
}
export type StepResultWhereUniqueInputInputObject =
   | Extract<keyof StepResultWhereUniqueInput, string>
   | { name: 'id'; alias?: string }

export interface ViewCreateInput {
   id?: string | null
   welcome?: WelcomeCreateOneInput
   company?: CompanyCreateOneInput
   menus?: MenuCreateManyInput | null
   tests?: TestCreateManyInput | null
   steps?: StepCreateManyInput | null
}
export type ViewCreateInputInputObject =
   | Extract<keyof ViewCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'welcome'; alias?: string }
   | { name: 'company'; alias?: string }
   | { name: 'menus'; alias?: string }
   | { name: 'tests'; alias?: string }
   | { name: 'steps'; alias?: string }

export interface WelcomeCreateOneInput {
   create?: WelcomeCreateInput | null
   connect?: WelcomeWhereUniqueInput | null
}
export type WelcomeCreateOneInputInputObject =
   | Extract<keyof WelcomeCreateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface WelcomeCreateInput {
   id?: string | null
   title?: string
   message?: string
}
export type WelcomeCreateInputInputObject =
   | Extract<keyof WelcomeCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'message'; alias?: string }

export interface CompanyCreateOneInput {
   create?: CompanyCreateInput | null
   connect?: CompanyWhereUniqueInput | null
}
export type CompanyCreateOneInputInputObject =
   | Extract<keyof CompanyCreateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface CompanyCreateInput {
   id?: string | null
   name?: string
   abbr?: string | null
   logo?: string | null
}
export type CompanyCreateInputInputObject =
   | Extract<keyof CompanyCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'abbr'; alias?: string }
   | { name: 'logo'; alias?: string }

export interface MenuCreateManyInput {
   create?: MenuCreateInput[]
   connect?: MenuWhereUniqueInput[]
}
export type MenuCreateManyInputInputObject =
   | Extract<keyof MenuCreateManyInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface MenuCreateInput {
   id?: string | null
   menu?: MenuCreateOneWithoutItemsInput | null
   name?: string
   items?: MenuCreateManyWithoutMenuInput | null
}
export type MenuCreateInputInputObject =
   | Extract<keyof MenuCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'menu'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'items'; alias?: string }

export interface MenuCreateOneWithoutItemsInput {
   create?: MenuCreateWithoutItemsInput | null
   connect?: MenuWhereUniqueInput | null
}
export type MenuCreateOneWithoutItemsInputInputObject =
   | Extract<keyof MenuCreateOneWithoutItemsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface MenuCreateWithoutItemsInput {
   id?: string | null
   menu?: MenuCreateOneWithoutItemsInput | null
   name?: string
}
export type MenuCreateWithoutItemsInputInputObject =
   | Extract<keyof MenuCreateWithoutItemsInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'menu'; alias?: string }
   | { name: 'name'; alias?: string }

export interface MenuCreateManyWithoutMenuInput {
   create?: MenuCreateWithoutMenuInput[]
   connect?: MenuWhereUniqueInput[]
}
export type MenuCreateManyWithoutMenuInputInputObject =
   | Extract<keyof MenuCreateManyWithoutMenuInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface MenuCreateWithoutMenuInput {
   id?: string | null
   name?: string
   items?: MenuCreateManyWithoutMenuInput | null
}
export type MenuCreateWithoutMenuInputInputObject =
   | Extract<keyof MenuCreateWithoutMenuInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'items'; alias?: string }

export interface TestCreateManyInput {
   create?: TestCreateInput[]
   connect?: TestWhereUniqueInput[]
}
export type TestCreateManyInputInputObject =
   | Extract<keyof TestCreateManyInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TestCreateInput {
   id?: string | null
   title?: string
   steps?: StepCreateManyInput | null
   menus?: MenuCreateManyInput | null
   results?: TestResultCreateManyWithoutParentInput | null
}
export type TestCreateInputInputObject =
   | Extract<keyof TestCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'menus'; alias?: string }
   | { name: 'results'; alias?: string }

export interface StepCreateManyInput {
   create?: StepCreateInput[]
   connect?: StepWhereUniqueInput[]
}
export type StepCreateManyInputInputObject =
   | Extract<keyof StepCreateManyInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface StepCreateInput {
   id?: string | null
   question?: string
   target?: MenuCreateOneInput
   path?: MenuCreateManyInput | null
   results?: StepResultCreateManyWithoutParentInput | null
}
export type StepCreateInputInputObject =
   | Extract<keyof StepCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'question'; alias?: string }
   | { name: 'target'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'results'; alias?: string }

export interface MenuCreateOneInput {
   create?: MenuCreateInput | null
   connect?: MenuWhereUniqueInput | null
}
export type MenuCreateOneInputInputObject =
   | Extract<keyof MenuCreateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface StepResultCreateManyWithoutParentInput {
   create?: StepResultCreateWithoutParentInput[]
   connect?: StepResultWhereUniqueInput[]
}
export type StepResultCreateManyWithoutParentInputInputObject =
   | Extract<keyof StepResultCreateManyWithoutParentInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface StepResultCreateWithoutParentInput {
   id?: string | null
   resultParent?: TestResultCreateOneWithoutStepsInput
   start?: string
   end?: string | null
   time?: TimeResultCreateOneInput | null
   path?: MenuCreateManyInput | null
   status?: prisma.ResultStatus | null
}
export type StepResultCreateWithoutParentInputInputObject =
   | Extract<keyof StepResultCreateWithoutParentInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'resultParent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'status'; alias?: string }

export interface TestResultCreateOneWithoutStepsInput {
   create?: TestResultCreateWithoutStepsInput | null
   connect?: TestResultWhereUniqueInput | null
}
export type TestResultCreateOneWithoutStepsInputInputObject =
   | Extract<keyof TestResultCreateOneWithoutStepsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TestResultCreateWithoutStepsInput {
   id?: string | null
   parent?: TestCreateOneWithoutResultsInput
   start?: string
   end?: string | null
   time?: TimeResultCreateOneInput | null
   status?: prisma.ResultStatus | null
}
export type TestResultCreateWithoutStepsInputInputObject =
   | Extract<keyof TestResultCreateWithoutStepsInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'parent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'status'; alias?: string }

export interface TestCreateOneWithoutResultsInput {
   create?: TestCreateWithoutResultsInput | null
   connect?: TestWhereUniqueInput | null
}
export type TestCreateOneWithoutResultsInputInputObject =
   | Extract<keyof TestCreateOneWithoutResultsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TestCreateWithoutResultsInput {
   id?: string | null
   title?: string
   steps?: StepCreateManyInput | null
   menus?: MenuCreateManyInput | null
}
export type TestCreateWithoutResultsInputInputObject =
   | Extract<keyof TestCreateWithoutResultsInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'menus'; alias?: string }

export interface TimeResultCreateOneInput {
   create?: TimeResultCreateInput | null
   connect?: TimeResultWhereUniqueInput | null
}
export type TimeResultCreateOneInputInputObject =
   | Extract<keyof TimeResultCreateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TimeResultCreateInput {
   id?: string | null
   int?: number
   text?: string
}
export type TimeResultCreateInputInputObject =
   | Extract<keyof TimeResultCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'int'; alias?: string }
   | { name: 'text'; alias?: string }

export interface TestResultCreateManyWithoutParentInput {
   create?: TestResultCreateWithoutParentInput[]
   connect?: TestResultWhereUniqueInput[]
}
export type TestResultCreateManyWithoutParentInputInputObject =
   | Extract<keyof TestResultCreateManyWithoutParentInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TestResultCreateWithoutParentInput {
   id?: string | null
   start?: string
   end?: string | null
   time?: TimeResultCreateOneInput | null
   steps?: StepResultCreateManyWithoutResultParentInput | null
   status?: prisma.ResultStatus | null
}
export type TestResultCreateWithoutParentInputInputObject =
   | Extract<keyof TestResultCreateWithoutParentInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'status'; alias?: string }

export interface StepResultCreateManyWithoutResultParentInput {
   create?: StepResultCreateWithoutResultParentInput[]
   connect?: StepResultWhereUniqueInput[]
}
export type StepResultCreateManyWithoutResultParentInputInputObject =
   | Extract<keyof StepResultCreateManyWithoutResultParentInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface StepResultCreateWithoutResultParentInput {
   id?: string | null
   parent?: StepCreateOneWithoutResultsInput
   start?: string
   end?: string | null
   time?: TimeResultCreateOneInput | null
   path?: MenuCreateManyInput | null
   status?: prisma.ResultStatus | null
}
export type StepResultCreateWithoutResultParentInputInputObject =
   | Extract<keyof StepResultCreateWithoutResultParentInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'parent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'status'; alias?: string }

export interface StepCreateOneWithoutResultsInput {
   create?: StepCreateWithoutResultsInput | null
   connect?: StepWhereUniqueInput | null
}
export type StepCreateOneWithoutResultsInputInputObject =
   | Extract<keyof StepCreateOneWithoutResultsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface StepCreateWithoutResultsInput {
   id?: string | null
   question?: string
   target?: MenuCreateOneInput
   path?: MenuCreateManyInput | null
}
export type StepCreateWithoutResultsInputInputObject =
   | Extract<keyof StepCreateWithoutResultsInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'question'; alias?: string }
   | { name: 'target'; alias?: string }
   | { name: 'path'; alias?: string }

export interface ViewUpdateInput {
   welcome?: WelcomeUpdateOneRequiredInput | null
   company?: CompanyUpdateOneRequiredInput | null
   menus?: MenuUpdateManyInput | null
   tests?: TestUpdateManyInput | null
   steps?: StepUpdateManyInput | null
}
export type ViewUpdateInputInputObject =
   | Extract<keyof ViewUpdateInput, string>
   | { name: 'welcome'; alias?: string }
   | { name: 'company'; alias?: string }
   | { name: 'menus'; alias?: string }
   | { name: 'tests'; alias?: string }
   | { name: 'steps'; alias?: string }

export interface WelcomeUpdateOneRequiredInput {
   create?: WelcomeCreateInput | null
   update?: WelcomeUpdateDataInput | null
   upsert?: WelcomeUpsertNestedInput | null
   connect?: WelcomeWhereUniqueInput | null
}
export type WelcomeUpdateOneRequiredInputInputObject =
   | Extract<keyof WelcomeUpdateOneRequiredInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface WelcomeUpdateDataInput {
   title?: string | null
   message?: string | null
}
export type WelcomeUpdateDataInputInputObject =
   | Extract<keyof WelcomeUpdateDataInput, string>
   | { name: 'title'; alias?: string }
   | { name: 'message'; alias?: string }

export interface WelcomeUpsertNestedInput {
   update?: WelcomeUpdateDataInput
   create?: WelcomeCreateInput
}
export type WelcomeUpsertNestedInputInputObject =
   | Extract<keyof WelcomeUpsertNestedInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface CompanyUpdateOneRequiredInput {
   create?: CompanyCreateInput | null
   update?: CompanyUpdateDataInput | null
   upsert?: CompanyUpsertNestedInput | null
   connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneRequiredInputInputObject =
   | Extract<keyof CompanyUpdateOneRequiredInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface CompanyUpdateDataInput {
   name?: string | null
   abbr?: string | null
   logo?: string | null
}
export type CompanyUpdateDataInputInputObject =
   | Extract<keyof CompanyUpdateDataInput, string>
   | { name: 'name'; alias?: string }
   | { name: 'abbr'; alias?: string }
   | { name: 'logo'; alias?: string }

export interface CompanyUpsertNestedInput {
   update?: CompanyUpdateDataInput
   create?: CompanyCreateInput
}
export type CompanyUpsertNestedInputInputObject =
   | Extract<keyof CompanyUpsertNestedInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface MenuUpdateManyInput {
   create?: MenuCreateInput[]
   update?: MenuUpdateWithWhereUniqueNestedInput[]
   upsert?: MenuUpsertWithWhereUniqueNestedInput[]
   delete?: MenuWhereUniqueInput[]
   connect?: MenuWhereUniqueInput[]
   set?: MenuWhereUniqueInput[]
   disconnect?: MenuWhereUniqueInput[]
   deleteMany?: MenuScalarWhereInput[]
   updateMany?: MenuUpdateManyWithWhereNestedInput[]
}
export type MenuUpdateManyInputInputObject =
   | Extract<keyof MenuUpdateManyInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface MenuUpdateWithWhereUniqueNestedInput {
   where?: MenuWhereUniqueInput
   data?: MenuUpdateDataInput
}
export type MenuUpdateWithWhereUniqueNestedInputInputObject =
   | Extract<keyof MenuUpdateWithWhereUniqueNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface MenuUpdateDataInput {
   menu?: MenuUpdateOneWithoutItemsInput | null
   name?: string | null
   items?: MenuUpdateManyWithoutMenuInput | null
}
export type MenuUpdateDataInputInputObject =
   | Extract<keyof MenuUpdateDataInput, string>
   | { name: 'menu'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'items'; alias?: string }

export interface MenuUpdateOneWithoutItemsInput {
   create?: MenuCreateWithoutItemsInput | null
   update?: MenuUpdateWithoutItemsDataInput | null
   upsert?: MenuUpsertWithoutItemsInput | null
   delete?: boolean | null
   disconnect?: boolean | null
   connect?: MenuWhereUniqueInput | null
}
export type MenuUpdateOneWithoutItemsInputInputObject =
   | Extract<keyof MenuUpdateOneWithoutItemsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface MenuUpdateWithoutItemsDataInput {
   menu?: MenuUpdateOneWithoutItemsInput | null
   name?: string | null
}
export type MenuUpdateWithoutItemsDataInputInputObject =
   | Extract<keyof MenuUpdateWithoutItemsDataInput, string>
   | { name: 'menu'; alias?: string }
   | { name: 'name'; alias?: string }

export interface MenuUpsertWithoutItemsInput {
   update?: MenuUpdateWithoutItemsDataInput
   create?: MenuCreateWithoutItemsInput
}
export type MenuUpsertWithoutItemsInputInputObject =
   | Extract<keyof MenuUpsertWithoutItemsInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface MenuUpdateManyWithoutMenuInput {
   create?: MenuCreateWithoutMenuInput[]
   delete?: MenuWhereUniqueInput[]
   connect?: MenuWhereUniqueInput[]
   set?: MenuWhereUniqueInput[]
   disconnect?: MenuWhereUniqueInput[]
   update?: MenuUpdateWithWhereUniqueWithoutMenuInput[]
   upsert?: MenuUpsertWithWhereUniqueWithoutMenuInput[]
   deleteMany?: MenuScalarWhereInput[]
   updateMany?: MenuUpdateManyWithWhereNestedInput[]
}
export type MenuUpdateManyWithoutMenuInputInputObject =
   | Extract<keyof MenuUpdateManyWithoutMenuInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface MenuUpdateWithWhereUniqueWithoutMenuInput {
   where?: MenuWhereUniqueInput
   data?: MenuUpdateWithoutMenuDataInput
}
export type MenuUpdateWithWhereUniqueWithoutMenuInputInputObject =
   | Extract<keyof MenuUpdateWithWhereUniqueWithoutMenuInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface MenuUpdateWithoutMenuDataInput {
   name?: string | null
   items?: MenuUpdateManyWithoutMenuInput | null
}
export type MenuUpdateWithoutMenuDataInputInputObject =
   | Extract<keyof MenuUpdateWithoutMenuDataInput, string>
   | { name: 'name'; alias?: string }
   | { name: 'items'; alias?: string }

export interface MenuUpsertWithWhereUniqueWithoutMenuInput {
   where?: MenuWhereUniqueInput
   update?: MenuUpdateWithoutMenuDataInput
   create?: MenuCreateWithoutMenuInput
}
export type MenuUpsertWithWhereUniqueWithoutMenuInputInputObject =
   | Extract<keyof MenuUpsertWithWhereUniqueWithoutMenuInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface MenuScalarWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   name?: string | null
   name_not?: string | null
   name_in?: string[]
   name_not_in?: string[]
   name_lt?: string | null
   name_lte?: string | null
   name_gt?: string | null
   name_gte?: string | null
   name_contains?: string | null
   name_not_contains?: string | null
   name_starts_with?: string | null
   name_not_starts_with?: string | null
   name_ends_with?: string | null
   name_not_ends_with?: string | null
   AND?: MenuScalarWhereInput[]
   OR?: MenuScalarWhereInput[]
   NOT?: MenuScalarWhereInput[]
}
export type MenuScalarWhereInputInputObject =
   | Extract<keyof MenuScalarWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'name_not'; alias?: string }
   | { name: 'name_in'; alias?: string }
   | { name: 'name_not_in'; alias?: string }
   | { name: 'name_lt'; alias?: string }
   | { name: 'name_lte'; alias?: string }
   | { name: 'name_gt'; alias?: string }
   | { name: 'name_gte'; alias?: string }
   | { name: 'name_contains'; alias?: string }
   | { name: 'name_not_contains'; alias?: string }
   | { name: 'name_starts_with'; alias?: string }
   | { name: 'name_not_starts_with'; alias?: string }
   | { name: 'name_ends_with'; alias?: string }
   | { name: 'name_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }
   | { name: 'OR'; alias?: string }
   | { name: 'NOT'; alias?: string }

export interface MenuUpdateManyWithWhereNestedInput {
   where?: MenuScalarWhereInput
   data?: MenuUpdateManyDataInput
}
export type MenuUpdateManyWithWhereNestedInputInputObject =
   | Extract<keyof MenuUpdateManyWithWhereNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface MenuUpdateManyDataInput {
   name?: string | null
}
export type MenuUpdateManyDataInputInputObject =
   | Extract<keyof MenuUpdateManyDataInput, string>
   | { name: 'name'; alias?: string }

export interface MenuUpsertWithWhereUniqueNestedInput {
   where?: MenuWhereUniqueInput
   update?: MenuUpdateDataInput
   create?: MenuCreateInput
}
export type MenuUpsertWithWhereUniqueNestedInputInputObject =
   | Extract<keyof MenuUpsertWithWhereUniqueNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface TestUpdateManyInput {
   create?: TestCreateInput[]
   update?: TestUpdateWithWhereUniqueNestedInput[]
   upsert?: TestUpsertWithWhereUniqueNestedInput[]
   delete?: TestWhereUniqueInput[]
   connect?: TestWhereUniqueInput[]
   set?: TestWhereUniqueInput[]
   disconnect?: TestWhereUniqueInput[]
   deleteMany?: TestScalarWhereInput[]
   updateMany?: TestUpdateManyWithWhereNestedInput[]
}
export type TestUpdateManyInputInputObject =
   | Extract<keyof TestUpdateManyInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface TestUpdateWithWhereUniqueNestedInput {
   where?: TestWhereUniqueInput
   data?: TestUpdateDataInput
}
export type TestUpdateWithWhereUniqueNestedInputInputObject =
   | Extract<keyof TestUpdateWithWhereUniqueNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface TestUpdateDataInput {
   title?: string | null
   steps?: StepUpdateManyInput | null
   menus?: MenuUpdateManyInput | null
   results?: TestResultUpdateManyWithoutParentInput | null
}
export type TestUpdateDataInputInputObject =
   | Extract<keyof TestUpdateDataInput, string>
   | { name: 'title'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'menus'; alias?: string }
   | { name: 'results'; alias?: string }

export interface StepUpdateManyInput {
   create?: StepCreateInput[]
   update?: StepUpdateWithWhereUniqueNestedInput[]
   upsert?: StepUpsertWithWhereUniqueNestedInput[]
   delete?: StepWhereUniqueInput[]
   connect?: StepWhereUniqueInput[]
   set?: StepWhereUniqueInput[]
   disconnect?: StepWhereUniqueInput[]
   deleteMany?: StepScalarWhereInput[]
   updateMany?: StepUpdateManyWithWhereNestedInput[]
}
export type StepUpdateManyInputInputObject =
   | Extract<keyof StepUpdateManyInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface StepUpdateWithWhereUniqueNestedInput {
   where?: StepWhereUniqueInput
   data?: StepUpdateDataInput
}
export type StepUpdateWithWhereUniqueNestedInputInputObject =
   | Extract<keyof StepUpdateWithWhereUniqueNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface StepUpdateDataInput {
   question?: string | null
   target?: MenuUpdateOneRequiredInput | null
   path?: MenuUpdateManyInput | null
   results?: StepResultUpdateManyWithoutParentInput | null
}
export type StepUpdateDataInputInputObject =
   | Extract<keyof StepUpdateDataInput, string>
   | { name: 'question'; alias?: string }
   | { name: 'target'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'results'; alias?: string }

export interface MenuUpdateOneRequiredInput {
   create?: MenuCreateInput | null
   update?: MenuUpdateDataInput | null
   upsert?: MenuUpsertNestedInput | null
   connect?: MenuWhereUniqueInput | null
}
export type MenuUpdateOneRequiredInputInputObject =
   | Extract<keyof MenuUpdateOneRequiredInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface MenuUpsertNestedInput {
   update?: MenuUpdateDataInput
   create?: MenuCreateInput
}
export type MenuUpsertNestedInputInputObject =
   | Extract<keyof MenuUpsertNestedInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface StepResultUpdateManyWithoutParentInput {
   create?: StepResultCreateWithoutParentInput[]
   delete?: StepResultWhereUniqueInput[]
   connect?: StepResultWhereUniqueInput[]
   set?: StepResultWhereUniqueInput[]
   disconnect?: StepResultWhereUniqueInput[]
   update?: StepResultUpdateWithWhereUniqueWithoutParentInput[]
   upsert?: StepResultUpsertWithWhereUniqueWithoutParentInput[]
   deleteMany?: StepResultScalarWhereInput[]
   updateMany?: StepResultUpdateManyWithWhereNestedInput[]
}
export type StepResultUpdateManyWithoutParentInputInputObject =
   | Extract<keyof StepResultUpdateManyWithoutParentInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface StepResultUpdateWithWhereUniqueWithoutParentInput {
   where?: StepResultWhereUniqueInput
   data?: StepResultUpdateWithoutParentDataInput
}
export type StepResultUpdateWithWhereUniqueWithoutParentInputInputObject =
   | Extract<keyof StepResultUpdateWithWhereUniqueWithoutParentInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface StepResultUpdateWithoutParentDataInput {
   resultParent?: TestResultUpdateOneRequiredWithoutStepsInput | null
   start?: string | null
   end?: string | null
   time?: TimeResultUpdateOneInput | null
   path?: MenuUpdateManyInput | null
   status?: prisma.ResultStatus | null
}
export type StepResultUpdateWithoutParentDataInputInputObject =
   | Extract<keyof StepResultUpdateWithoutParentDataInput, string>
   | { name: 'resultParent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'status'; alias?: string }

export interface TestResultUpdateOneRequiredWithoutStepsInput {
   create?: TestResultCreateWithoutStepsInput | null
   update?: TestResultUpdateWithoutStepsDataInput | null
   upsert?: TestResultUpsertWithoutStepsInput | null
   connect?: TestResultWhereUniqueInput | null
}
export type TestResultUpdateOneRequiredWithoutStepsInputInputObject =
   | Extract<keyof TestResultUpdateOneRequiredWithoutStepsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TestResultUpdateWithoutStepsDataInput {
   parent?: TestUpdateOneRequiredWithoutResultsInput | null
   start?: string | null
   end?: string | null
   time?: TimeResultUpdateOneInput | null
   status?: prisma.ResultStatus | null
}
export type TestResultUpdateWithoutStepsDataInputInputObject =
   | Extract<keyof TestResultUpdateWithoutStepsDataInput, string>
   | { name: 'parent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'status'; alias?: string }

export interface TestUpdateOneRequiredWithoutResultsInput {
   create?: TestCreateWithoutResultsInput | null
   update?: TestUpdateWithoutResultsDataInput | null
   upsert?: TestUpsertWithoutResultsInput | null
   connect?: TestWhereUniqueInput | null
}
export type TestUpdateOneRequiredWithoutResultsInputInputObject =
   | Extract<keyof TestUpdateOneRequiredWithoutResultsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TestUpdateWithoutResultsDataInput {
   title?: string | null
   steps?: StepUpdateManyInput | null
   menus?: MenuUpdateManyInput | null
}
export type TestUpdateWithoutResultsDataInputInputObject =
   | Extract<keyof TestUpdateWithoutResultsDataInput, string>
   | { name: 'title'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'menus'; alias?: string }

export interface TestUpsertWithoutResultsInput {
   update?: TestUpdateWithoutResultsDataInput
   create?: TestCreateWithoutResultsInput
}
export type TestUpsertWithoutResultsInputInputObject =
   | Extract<keyof TestUpsertWithoutResultsInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface TimeResultUpdateOneInput {
   create?: TimeResultCreateInput | null
   update?: TimeResultUpdateDataInput | null
   upsert?: TimeResultUpsertNestedInput | null
   delete?: boolean | null
   disconnect?: boolean | null
   connect?: TimeResultWhereUniqueInput | null
}
export type TimeResultUpdateOneInputInputObject =
   | Extract<keyof TimeResultUpdateOneInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface TimeResultUpdateDataInput {
   int?: number | null
   text?: string | null
}
export type TimeResultUpdateDataInputInputObject =
   | Extract<keyof TimeResultUpdateDataInput, string>
   | { name: 'int'; alias?: string }
   | { name: 'text'; alias?: string }

export interface TimeResultUpsertNestedInput {
   update?: TimeResultUpdateDataInput
   create?: TimeResultCreateInput
}
export type TimeResultUpsertNestedInputInputObject =
   | Extract<keyof TimeResultUpsertNestedInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface TestResultUpsertWithoutStepsInput {
   update?: TestResultUpdateWithoutStepsDataInput
   create?: TestResultCreateWithoutStepsInput
}
export type TestResultUpsertWithoutStepsInputInputObject =
   | Extract<keyof TestResultUpsertWithoutStepsInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface StepResultUpsertWithWhereUniqueWithoutParentInput {
   where?: StepResultWhereUniqueInput
   update?: StepResultUpdateWithoutParentDataInput
   create?: StepResultCreateWithoutParentInput
}
export type StepResultUpsertWithWhereUniqueWithoutParentInputInputObject =
   | Extract<keyof StepResultUpsertWithWhereUniqueWithoutParentInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface StepResultScalarWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   start?: string | null
   start_not?: string | null
   start_in?: string[]
   start_not_in?: string[]
   start_lt?: string | null
   start_lte?: string | null
   start_gt?: string | null
   start_gte?: string | null
   end?: string | null
   end_not?: string | null
   end_in?: string[]
   end_not_in?: string[]
   end_lt?: string | null
   end_lte?: string | null
   end_gt?: string | null
   end_gte?: string | null
   status?: prisma.ResultStatus | null
   status_not?: prisma.ResultStatus | null
   status_in?: prisma.ResultStatus[]
   status_not_in?: prisma.ResultStatus[]
   AND?: StepResultScalarWhereInput[]
   OR?: StepResultScalarWhereInput[]
   NOT?: StepResultScalarWhereInput[]
}
export type StepResultScalarWhereInputInputObject =
   | Extract<keyof StepResultScalarWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'start_not'; alias?: string }
   | { name: 'start_in'; alias?: string }
   | { name: 'start_not_in'; alias?: string }
   | { name: 'start_lt'; alias?: string }
   | { name: 'start_lte'; alias?: string }
   | { name: 'start_gt'; alias?: string }
   | { name: 'start_gte'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'end_not'; alias?: string }
   | { name: 'end_in'; alias?: string }
   | { name: 'end_not_in'; alias?: string }
   | { name: 'end_lt'; alias?: string }
   | { name: 'end_lte'; alias?: string }
   | { name: 'end_gt'; alias?: string }
   | { name: 'end_gte'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'status_not'; alias?: string }
   | { name: 'status_in'; alias?: string }
   | { name: 'status_not_in'; alias?: string }
   | { name: 'AND'; alias?: string }
   | { name: 'OR'; alias?: string }
   | { name: 'NOT'; alias?: string }

export interface StepResultUpdateManyWithWhereNestedInput {
   where?: StepResultScalarWhereInput
   data?: StepResultUpdateManyDataInput
}
export type StepResultUpdateManyWithWhereNestedInputInputObject =
   | Extract<keyof StepResultUpdateManyWithWhereNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface StepResultUpdateManyDataInput {
   start?: string | null
   end?: string | null
   status?: prisma.ResultStatus | null
}
export type StepResultUpdateManyDataInputInputObject =
   | Extract<keyof StepResultUpdateManyDataInput, string>
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'status'; alias?: string }

export interface StepUpsertWithWhereUniqueNestedInput {
   where?: StepWhereUniqueInput
   update?: StepUpdateDataInput
   create?: StepCreateInput
}
export type StepUpsertWithWhereUniqueNestedInputInputObject =
   | Extract<keyof StepUpsertWithWhereUniqueNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface StepScalarWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   question?: string | null
   question_not?: string | null
   question_in?: string[]
   question_not_in?: string[]
   question_lt?: string | null
   question_lte?: string | null
   question_gt?: string | null
   question_gte?: string | null
   question_contains?: string | null
   question_not_contains?: string | null
   question_starts_with?: string | null
   question_not_starts_with?: string | null
   question_ends_with?: string | null
   question_not_ends_with?: string | null
   AND?: StepScalarWhereInput[]
   OR?: StepScalarWhereInput[]
   NOT?: StepScalarWhereInput[]
}
export type StepScalarWhereInputInputObject =
   | Extract<keyof StepScalarWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'question'; alias?: string }
   | { name: 'question_not'; alias?: string }
   | { name: 'question_in'; alias?: string }
   | { name: 'question_not_in'; alias?: string }
   | { name: 'question_lt'; alias?: string }
   | { name: 'question_lte'; alias?: string }
   | { name: 'question_gt'; alias?: string }
   | { name: 'question_gte'; alias?: string }
   | { name: 'question_contains'; alias?: string }
   | { name: 'question_not_contains'; alias?: string }
   | { name: 'question_starts_with'; alias?: string }
   | { name: 'question_not_starts_with'; alias?: string }
   | { name: 'question_ends_with'; alias?: string }
   | { name: 'question_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }
   | { name: 'OR'; alias?: string }
   | { name: 'NOT'; alias?: string }

export interface StepUpdateManyWithWhereNestedInput {
   where?: StepScalarWhereInput
   data?: StepUpdateManyDataInput
}
export type StepUpdateManyWithWhereNestedInputInputObject =
   | Extract<keyof StepUpdateManyWithWhereNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface StepUpdateManyDataInput {
   question?: string | null
}
export type StepUpdateManyDataInputInputObject =
   | Extract<keyof StepUpdateManyDataInput, string>
   | { name: 'question'; alias?: string }

export interface TestResultUpdateManyWithoutParentInput {
   create?: TestResultCreateWithoutParentInput[]
   delete?: TestResultWhereUniqueInput[]
   connect?: TestResultWhereUniqueInput[]
   set?: TestResultWhereUniqueInput[]
   disconnect?: TestResultWhereUniqueInput[]
   update?: TestResultUpdateWithWhereUniqueWithoutParentInput[]
   upsert?: TestResultUpsertWithWhereUniqueWithoutParentInput[]
   deleteMany?: TestResultScalarWhereInput[]
   updateMany?: TestResultUpdateManyWithWhereNestedInput[]
}
export type TestResultUpdateManyWithoutParentInputInputObject =
   | Extract<keyof TestResultUpdateManyWithoutParentInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface TestResultUpdateWithWhereUniqueWithoutParentInput {
   where?: TestResultWhereUniqueInput
   data?: TestResultUpdateWithoutParentDataInput
}
export type TestResultUpdateWithWhereUniqueWithoutParentInputInputObject =
   | Extract<keyof TestResultUpdateWithWhereUniqueWithoutParentInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface TestResultUpdateWithoutParentDataInput {
   start?: string | null
   end?: string | null
   time?: TimeResultUpdateOneInput | null
   steps?: StepResultUpdateManyWithoutResultParentInput | null
   status?: prisma.ResultStatus | null
}
export type TestResultUpdateWithoutParentDataInputInputObject =
   | Extract<keyof TestResultUpdateWithoutParentDataInput, string>
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'status'; alias?: string }

export interface StepResultUpdateManyWithoutResultParentInput {
   create?: StepResultCreateWithoutResultParentInput[]
   delete?: StepResultWhereUniqueInput[]
   connect?: StepResultWhereUniqueInput[]
   set?: StepResultWhereUniqueInput[]
   disconnect?: StepResultWhereUniqueInput[]
   update?: StepResultUpdateWithWhereUniqueWithoutResultParentInput[]
   upsert?: StepResultUpsertWithWhereUniqueWithoutResultParentInput[]
   deleteMany?: StepResultScalarWhereInput[]
   updateMany?: StepResultUpdateManyWithWhereNestedInput[]
}
export type StepResultUpdateManyWithoutResultParentInputInputObject =
   | Extract<keyof StepResultUpdateManyWithoutResultParentInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'delete'; alias?: string }
   | { name: 'connect'; alias?: string }
   | { name: 'set'; alias?: string }
   | { name: 'disconnect'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'deleteMany'; alias?: string }
   | { name: 'updateMany'; alias?: string }

export interface StepResultUpdateWithWhereUniqueWithoutResultParentInput {
   where?: StepResultWhereUniqueInput
   data?: StepResultUpdateWithoutResultParentDataInput
}
export type StepResultUpdateWithWhereUniqueWithoutResultParentInputInputObject =
   | Extract<
        keyof StepResultUpdateWithWhereUniqueWithoutResultParentInput,
        string
     >
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface StepResultUpdateWithoutResultParentDataInput {
   parent?: StepUpdateOneRequiredWithoutResultsInput | null
   start?: string | null
   end?: string | null
   time?: TimeResultUpdateOneInput | null
   path?: MenuUpdateManyInput | null
   status?: prisma.ResultStatus | null
}
export type StepResultUpdateWithoutResultParentDataInputInputObject =
   | Extract<keyof StepResultUpdateWithoutResultParentDataInput, string>
   | { name: 'parent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'status'; alias?: string }

export interface StepUpdateOneRequiredWithoutResultsInput {
   create?: StepCreateWithoutResultsInput | null
   update?: StepUpdateWithoutResultsDataInput | null
   upsert?: StepUpsertWithoutResultsInput | null
   connect?: StepWhereUniqueInput | null
}
export type StepUpdateOneRequiredWithoutResultsInputInputObject =
   | Extract<keyof StepUpdateOneRequiredWithoutResultsInput, string>
   | { name: 'create'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'upsert'; alias?: string }
   | { name: 'connect'; alias?: string }

export interface StepUpdateWithoutResultsDataInput {
   question?: string | null
   target?: MenuUpdateOneRequiredInput | null
   path?: MenuUpdateManyInput | null
}
export type StepUpdateWithoutResultsDataInputInputObject =
   | Extract<keyof StepUpdateWithoutResultsDataInput, string>
   | { name: 'question'; alias?: string }
   | { name: 'target'; alias?: string }
   | { name: 'path'; alias?: string }

export interface StepUpsertWithoutResultsInput {
   update?: StepUpdateWithoutResultsDataInput
   create?: StepCreateWithoutResultsInput
}
export type StepUpsertWithoutResultsInputInputObject =
   | Extract<keyof StepUpsertWithoutResultsInput, string>
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface StepResultUpsertWithWhereUniqueWithoutResultParentInput {
   where?: StepResultWhereUniqueInput
   update?: StepResultUpdateWithoutResultParentDataInput
   create?: StepResultCreateWithoutResultParentInput
}
export type StepResultUpsertWithWhereUniqueWithoutResultParentInputInputObject =
   | Extract<
        keyof StepResultUpsertWithWhereUniqueWithoutResultParentInput,
        string
     >
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface TestResultUpsertWithWhereUniqueWithoutParentInput {
   where?: TestResultWhereUniqueInput
   update?: TestResultUpdateWithoutParentDataInput
   create?: TestResultCreateWithoutParentInput
}
export type TestResultUpsertWithWhereUniqueWithoutParentInputInputObject =
   | Extract<keyof TestResultUpsertWithWhereUniqueWithoutParentInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface TestResultScalarWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   start?: string | null
   start_not?: string | null
   start_in?: string[]
   start_not_in?: string[]
   start_lt?: string | null
   start_lte?: string | null
   start_gt?: string | null
   start_gte?: string | null
   end?: string | null
   end_not?: string | null
   end_in?: string[]
   end_not_in?: string[]
   end_lt?: string | null
   end_lte?: string | null
   end_gt?: string | null
   end_gte?: string | null
   status?: prisma.ResultStatus | null
   status_not?: prisma.ResultStatus | null
   status_in?: prisma.ResultStatus[]
   status_not_in?: prisma.ResultStatus[]
   AND?: TestResultScalarWhereInput[]
   OR?: TestResultScalarWhereInput[]
   NOT?: TestResultScalarWhereInput[]
}
export type TestResultScalarWhereInputInputObject =
   | Extract<keyof TestResultScalarWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'start_not'; alias?: string }
   | { name: 'start_in'; alias?: string }
   | { name: 'start_not_in'; alias?: string }
   | { name: 'start_lt'; alias?: string }
   | { name: 'start_lte'; alias?: string }
   | { name: 'start_gt'; alias?: string }
   | { name: 'start_gte'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'end_not'; alias?: string }
   | { name: 'end_in'; alias?: string }
   | { name: 'end_not_in'; alias?: string }
   | { name: 'end_lt'; alias?: string }
   | { name: 'end_lte'; alias?: string }
   | { name: 'end_gt'; alias?: string }
   | { name: 'end_gte'; alias?: string }
   | { name: 'status'; alias?: string }
   | { name: 'status_not'; alias?: string }
   | { name: 'status_in'; alias?: string }
   | { name: 'status_not_in'; alias?: string }
   | { name: 'AND'; alias?: string }
   | { name: 'OR'; alias?: string }
   | { name: 'NOT'; alias?: string }

export interface TestResultUpdateManyWithWhereNestedInput {
   where?: TestResultScalarWhereInput
   data?: TestResultUpdateManyDataInput
}
export type TestResultUpdateManyWithWhereNestedInputInputObject =
   | Extract<keyof TestResultUpdateManyWithWhereNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface TestResultUpdateManyDataInput {
   start?: string | null
   end?: string | null
   status?: prisma.ResultStatus | null
}
export type TestResultUpdateManyDataInputInputObject =
   | Extract<keyof TestResultUpdateManyDataInput, string>
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'status'; alias?: string }

export interface TestUpsertWithWhereUniqueNestedInput {
   where?: TestWhereUniqueInput
   update?: TestUpdateDataInput
   create?: TestCreateInput
}
export type TestUpsertWithWhereUniqueNestedInputInputObject =
   | Extract<keyof TestUpsertWithWhereUniqueNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'update'; alias?: string }
   | { name: 'create'; alias?: string }

export interface TestScalarWhereInput {
   id?: string | null
   id_not?: string | null
   id_in?: string[]
   id_not_in?: string[]
   id_lt?: string | null
   id_lte?: string | null
   id_gt?: string | null
   id_gte?: string | null
   id_contains?: string | null
   id_not_contains?: string | null
   id_starts_with?: string | null
   id_not_starts_with?: string | null
   id_ends_with?: string | null
   id_not_ends_with?: string | null
   title?: string | null
   title_not?: string | null
   title_in?: string[]
   title_not_in?: string[]
   title_lt?: string | null
   title_lte?: string | null
   title_gt?: string | null
   title_gte?: string | null
   title_contains?: string | null
   title_not_contains?: string | null
   title_starts_with?: string | null
   title_not_starts_with?: string | null
   title_ends_with?: string | null
   title_not_ends_with?: string | null
   AND?: TestScalarWhereInput[]
   OR?: TestScalarWhereInput[]
   NOT?: TestScalarWhereInput[]
}
export type TestScalarWhereInputInputObject =
   | Extract<keyof TestScalarWhereInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'id_not'; alias?: string }
   | { name: 'id_in'; alias?: string }
   | { name: 'id_not_in'; alias?: string }
   | { name: 'id_lt'; alias?: string }
   | { name: 'id_lte'; alias?: string }
   | { name: 'id_gt'; alias?: string }
   | { name: 'id_gte'; alias?: string }
   | { name: 'id_contains'; alias?: string }
   | { name: 'id_not_contains'; alias?: string }
   | { name: 'id_starts_with'; alias?: string }
   | { name: 'id_not_starts_with'; alias?: string }
   | { name: 'id_ends_with'; alias?: string }
   | { name: 'id_not_ends_with'; alias?: string }
   | { name: 'title'; alias?: string }
   | { name: 'title_not'; alias?: string }
   | { name: 'title_in'; alias?: string }
   | { name: 'title_not_in'; alias?: string }
   | { name: 'title_lt'; alias?: string }
   | { name: 'title_lte'; alias?: string }
   | { name: 'title_gt'; alias?: string }
   | { name: 'title_gte'; alias?: string }
   | { name: 'title_contains'; alias?: string }
   | { name: 'title_not_contains'; alias?: string }
   | { name: 'title_starts_with'; alias?: string }
   | { name: 'title_not_starts_with'; alias?: string }
   | { name: 'title_ends_with'; alias?: string }
   | { name: 'title_not_ends_with'; alias?: string }
   | { name: 'AND'; alias?: string }
   | { name: 'OR'; alias?: string }
   | { name: 'NOT'; alias?: string }

export interface TestUpdateManyWithWhereNestedInput {
   where?: TestScalarWhereInput
   data?: TestUpdateManyDataInput
}
export type TestUpdateManyWithWhereNestedInputInputObject =
   | Extract<keyof TestUpdateManyWithWhereNestedInput, string>
   | { name: 'where'; alias?: string }
   | { name: 'data'; alias?: string }

export interface TestUpdateManyDataInput {
   title?: string | null
}
export type TestUpdateManyDataInputInputObject =
   | Extract<keyof TestUpdateManyDataInput, string>
   | { name: 'title'; alias?: string }

export interface WelcomeUpdateInput {
   title?: string | null
   message?: string | null
}
export type WelcomeUpdateInputInputObject =
   | Extract<keyof WelcomeUpdateInput, string>
   | { name: 'title'; alias?: string }
   | { name: 'message'; alias?: string }

export interface WelcomeUpdateManyMutationInput {
   title?: string | null
   message?: string | null
}
export type WelcomeUpdateManyMutationInputInputObject =
   | Extract<keyof WelcomeUpdateManyMutationInput, string>
   | { name: 'title'; alias?: string }
   | { name: 'message'; alias?: string }

export interface CompanyUpdateInput {
   name?: string | null
   abbr?: string | null
   logo?: string | null
}
export type CompanyUpdateInputInputObject =
   | Extract<keyof CompanyUpdateInput, string>
   | { name: 'name'; alias?: string }
   | { name: 'abbr'; alias?: string }
   | { name: 'logo'; alias?: string }

export interface CompanyUpdateManyMutationInput {
   name?: string | null
   abbr?: string | null
   logo?: string | null
}
export type CompanyUpdateManyMutationInputInputObject =
   | Extract<keyof CompanyUpdateManyMutationInput, string>
   | { name: 'name'; alias?: string }
   | { name: 'abbr'; alias?: string }
   | { name: 'logo'; alias?: string }

export interface TestUpdateInput {
   title?: string | null
   steps?: StepUpdateManyInput | null
   menus?: MenuUpdateManyInput | null
   results?: TestResultUpdateManyWithoutParentInput | null
}
export type TestUpdateInputInputObject =
   | Extract<keyof TestUpdateInput, string>
   | { name: 'title'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'menus'; alias?: string }
   | { name: 'results'; alias?: string }

export interface TestUpdateManyMutationInput {
   title?: string | null
}
export type TestUpdateManyMutationInputInputObject =
   | Extract<keyof TestUpdateManyMutationInput, string>
   | { name: 'title'; alias?: string }

export interface MenuUpdateInput {
   menu?: MenuUpdateOneWithoutItemsInput | null
   name?: string | null
   items?: MenuUpdateManyWithoutMenuInput | null
}
export type MenuUpdateInputInputObject =
   | Extract<keyof MenuUpdateInput, string>
   | { name: 'menu'; alias?: string }
   | { name: 'name'; alias?: string }
   | { name: 'items'; alias?: string }

export interface MenuUpdateManyMutationInput {
   name?: string | null
}
export type MenuUpdateManyMutationInputInputObject =
   | Extract<keyof MenuUpdateManyMutationInput, string>
   | { name: 'name'; alias?: string }

export interface StepUpdateInput {
   question?: string | null
   target?: MenuUpdateOneRequiredInput | null
   path?: MenuUpdateManyInput | null
   results?: StepResultUpdateManyWithoutParentInput | null
}
export type StepUpdateInputInputObject =
   | Extract<keyof StepUpdateInput, string>
   | { name: 'question'; alias?: string }
   | { name: 'target'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'results'; alias?: string }

export interface StepUpdateManyMutationInput {
   question?: string | null
}
export type StepUpdateManyMutationInputInputObject =
   | Extract<keyof StepUpdateManyMutationInput, string>
   | { name: 'question'; alias?: string }

export interface TestResultCreateInput {
   id?: string | null
   parent?: TestCreateOneWithoutResultsInput
   start?: string
   end?: string | null
   time?: TimeResultCreateOneInput | null
   steps?: StepResultCreateManyWithoutResultParentInput | null
   status?: prisma.ResultStatus | null
}
export type TestResultCreateInputInputObject =
   | Extract<keyof TestResultCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'parent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'status'; alias?: string }

export interface TestResultUpdateInput {
   parent?: TestUpdateOneRequiredWithoutResultsInput | null
   start?: string | null
   end?: string | null
   time?: TimeResultUpdateOneInput | null
   steps?: StepResultUpdateManyWithoutResultParentInput | null
   status?: prisma.ResultStatus | null
}
export type TestResultUpdateInputInputObject =
   | Extract<keyof TestResultUpdateInput, string>
   | { name: 'parent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'steps'; alias?: string }
   | { name: 'status'; alias?: string }

export interface TestResultUpdateManyMutationInput {
   start?: string | null
   end?: string | null
   status?: prisma.ResultStatus | null
}
export type TestResultUpdateManyMutationInputInputObject =
   | Extract<keyof TestResultUpdateManyMutationInput, string>
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'status'; alias?: string }

export interface TimeResultUpdateInput {
   int?: number | null
   text?: string | null
}
export type TimeResultUpdateInputInputObject =
   | Extract<keyof TimeResultUpdateInput, string>
   | { name: 'int'; alias?: string }
   | { name: 'text'; alias?: string }

export interface TimeResultUpdateManyMutationInput {
   int?: number | null
   text?: string | null
}
export type TimeResultUpdateManyMutationInputInputObject =
   | Extract<keyof TimeResultUpdateManyMutationInput, string>
   | { name: 'int'; alias?: string }
   | { name: 'text'; alias?: string }

export interface StepResultCreateInput {
   id?: string | null
   parent?: StepCreateOneWithoutResultsInput
   resultParent?: TestResultCreateOneWithoutStepsInput
   start?: string
   end?: string | null
   time?: TimeResultCreateOneInput | null
   path?: MenuCreateManyInput | null
   status?: prisma.ResultStatus | null
}
export type StepResultCreateInputInputObject =
   | Extract<keyof StepResultCreateInput, string>
   | { name: 'id'; alias?: string }
   | { name: 'parent'; alias?: string }
   | { name: 'resultParent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'status'; alias?: string }

export interface StepResultUpdateInput {
   parent?: StepUpdateOneRequiredWithoutResultsInput | null
   resultParent?: TestResultUpdateOneRequiredWithoutStepsInput | null
   start?: string | null
   end?: string | null
   time?: TimeResultUpdateOneInput | null
   path?: MenuUpdateManyInput | null
   status?: prisma.ResultStatus | null
}
export type StepResultUpdateInputInputObject =
   | Extract<keyof StepResultUpdateInput, string>
   | { name: 'parent'; alias?: string }
   | { name: 'resultParent'; alias?: string }
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'time'; alias?: string }
   | { name: 'path'; alias?: string }
   | { name: 'status'; alias?: string }

export interface StepResultUpdateManyMutationInput {
   start?: string | null
   end?: string | null
   status?: prisma.ResultStatus | null
}
export type StepResultUpdateManyMutationInputInputObject =
   | Extract<keyof StepResultUpdateManyMutationInput, string>
   | { name: 'start'; alias?: string }
   | { name: 'end'; alias?: string }
   | { name: 'status'; alias?: string }

export interface ViewSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: ViewWhereInput | null
   AND?: ViewSubscriptionWhereInput[]
}
export type ViewSubscriptionWhereInputInputObject =
   | Extract<keyof ViewSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface WelcomeSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: WelcomeWhereInput | null
   AND?: WelcomeSubscriptionWhereInput[]
}
export type WelcomeSubscriptionWhereInputInputObject =
   | Extract<keyof WelcomeSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface CompanySubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: CompanyWhereInput | null
   AND?: CompanySubscriptionWhereInput[]
}
export type CompanySubscriptionWhereInputInputObject =
   | Extract<keyof CompanySubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TestSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: TestWhereInput | null
   AND?: TestSubscriptionWhereInput[]
}
export type TestSubscriptionWhereInputInputObject =
   | Extract<keyof TestSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface MenuSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: MenuWhereInput | null
   AND?: MenuSubscriptionWhereInput[]
}
export type MenuSubscriptionWhereInputInputObject =
   | Extract<keyof MenuSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface StepSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: StepWhereInput | null
   AND?: StepSubscriptionWhereInput[]
}
export type StepSubscriptionWhereInputInputObject =
   | Extract<keyof StepSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TestResultSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: TestResultWhereInput | null
   AND?: TestResultSubscriptionWhereInput[]
}
export type TestResultSubscriptionWhereInputInputObject =
   | Extract<keyof TestResultSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface TimeResultSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: TimeResultWhereInput | null
   AND?: TimeResultSubscriptionWhereInput[]
}
export type TimeResultSubscriptionWhereInputInputObject =
   | Extract<keyof TimeResultSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export interface StepResultSubscriptionWhereInput {
   mutation_in?: prisma.MutationType[]
   updatedFields_contains?: string | null
   updatedFields_contains_every?: string[]
   updatedFields_contains_some?: string[]
   node?: StepResultWhereInput | null
   AND?: StepResultSubscriptionWhereInput[]
}
export type StepResultSubscriptionWhereInputInputObject =
   | Extract<keyof StepResultSubscriptionWhereInput, string>
   | { name: 'mutation_in'; alias?: string }
   | { name: 'updatedFields_contains'; alias?: string }
   | { name: 'updatedFields_contains_every'; alias?: string }
   | { name: 'updatedFields_contains_some'; alias?: string }
   | { name: 'node'; alias?: string }
   | { name: 'AND'; alias?: string }

export type MenuOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'name_ASC'
   | 'name_DESC'

export type ResultStatusValues = 'SUCESSES' | 'PARTIAL' | 'FAIL' | 'ABORTED'

export type TestOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'title_ASC'
   | 'title_DESC'

export type StepOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'question_ASC'
   | 'question_DESC'

export type StepResultOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'start_ASC'
   | 'start_DESC'
   | 'end_ASC'
   | 'end_DESC'
   | 'status_ASC'
   | 'status_DESC'

export type TestResultOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'start_ASC'
   | 'start_DESC'
   | 'end_ASC'
   | 'end_DESC'
   | 'status_ASC'
   | 'status_DESC'

export type ViewOrderByInputValues = 'id_ASC' | 'id_DESC'

export type WelcomeOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'title_ASC'
   | 'title_DESC'
   | 'message_ASC'
   | 'message_DESC'

export type CompanyOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'name_ASC'
   | 'name_DESC'
   | 'abbr_ASC'
   | 'abbr_DESC'
   | 'logo_ASC'
   | 'logo_DESC'

export type TimeResultOrderByInputValues =
   | 'id_ASC'
   | 'id_DESC'
   | 'int_ASC'
   | 'int_DESC'
   | 'text_ASC'
   | 'text_DESC'

export type MutationTypeValues = 'CREATED' | 'UPDATED' | 'DELETED'
